<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Engineering | RockPaperScissors]]></title>
  <link href="http://morganp.github.io/blog/engineering/atom.xml" rel="self"/>
  <link href="http://morganp.github.io/"/>
  <updated>2014-03-05T21:40:32+00:00</updated>
  <id>http://morganp.github.io/</id>
  <author>
    <name><![CDATA[Morgan Prior]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OO Magic Bullet?]]></title>
    <link href="http://morganp.github.io/blog/engineering/oo-magic-bullet/"/>
    <updated>2014-03-01T20:04:06+00:00</updated>
    <id>http://morganp.github.io/blog/engineering/oo-magic-bullet</id>
    <content type="html"><![CDATA[<p>I do not think that there are any magic bullets, best practises can minimise risk but you have to fully understand the technique. You can not just switch from procedural code to wrapping everything in an object and claim statements like this from <a href="http://www.mathworks.co.uk/company/newsletters/articles/introduction-to-object-oriented-programming-in-matlab.html">mathworks</a>:</p>

<blockquote><p>Because it was built using OO techniques, the application is now robust enough for others to use and maintain and can be integrated with related applications throughout an organization.</p></blockquote>

<p>Sounds like Object-Oriented programming is a magic bullet to solve all you programming woes!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[$display Without a Line Return]]></title>
    <link href="http://morganp.github.io/blog/engineering/without-a-line-return/"/>
    <updated>2014-03-01T17:49:43+00:00</updated>
    <id>http://morganp.github.io/blog/engineering/without-a-line-return</id>
    <content type="html"><![CDATA[<p>In Verilog to output to stdout without a line return use <code>$write();</code></p>

<p>Equivalent statements :</p>

<pre><code>$write("\n");
$display("");
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Matlab: Legend Colours]]></title>
    <link href="http://morganp.github.io/blog/engineering/matlab-legend-colours/"/>
    <updated>2014-02-13T20:51:45+00:00</updated>
    <id>http://morganp.github.io/blog/engineering/matlab-legend-colours</id>
    <content type="html"><![CDATA[<p>When plotting several lines in Matlab, I have become aware of how hard it was to see the colours in the legend. Based <a href="http://www.mathworks.co.uk/matlabcentral/newsreader/view_thread/267186">on this matlabcentral question</a> I found an easy way to control the line thickness in the legend.</p>

<pre><code>plot(randn(100,1));
hold on;
plot(randn(100,1),'k');


[legh,objh,outh,outm] = legend('First','Second','Location','Southeast');
set(objh,'linewidth',2); %%&lt;-- set legend line thickness to 2
</code></pre>

<p>Or just the following after you define your legend:</p>

<pre><code>% legend('First','Second','Location','Southeast');

[legh,objh,outh,outm] = legend();
set(objh,'linewidth',2);
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Matlab Benchmarking]]></title>
    <link href="http://morganp.github.io/blog/engineering/matlab-benchmarking/"/>
    <updated>2014-02-12T20:55:42+00:00</updated>
    <id>http://morganp.github.io/blog/engineering/matlab-benchmarking</id>
    <content type="html"><![CDATA[<p>In the following example we test the allocation speed of different types:</p>

<pre><code>samples_to_avg = 10000;
for i=1:samples_to_avg
  tic; t = int8(zeros(32,2^16)); b(i) = toc;
end
avg_int8 = mean(b);

for i=1:samples_to_avg
  tic; t = zeros(32,2^16); b(i) = toc;
end
avg_double = mean(b);

%int 8 is
disp(['int8 pre-allocation is ', num2str(1 - avg_double/avg_int8), ' times faster than doubles'])
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Matlab Remove Values From Array]]></title>
    <link href="http://morganp.github.io/blog/engineering/matlab-remove-values-from-array/"/>
    <updated>2014-02-11T21:21:44+00:00</updated>
    <id>http://morganp.github.io/blog/engineering/matlab-remove-values-from-array</id>
    <content type="html"><![CDATA[<p>Remove all values of 3 from array</p>

<pre><code>a = [1 2 3 4 3];
a(any(a==3,1)) = []
a =


     1     2     4
</code></pre>

<p>Remove 2 or less from array</p>

<pre><code>a = [1 2 3 4 3];
a(any(a&lt;=2,1)) = []
a =


     3     4     3
</code></pre>

<p>Remove values between 2 and 3</p>

<pre><code>a = [1 2 3 4 3];
a(any((a&gt;=2)&amp;(a&lt;=3),1)) = []
a =


     1     4
</code></pre>

<p>Based on <a href="http://matlabnewbie.blogspot.co.uk/2011/11/remove-any-rows-that-contains-specific.html">examples from matlabnewbie</a>.</p>
]]></content>
  </entry>
  
</feed>
