<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Engineering | RockPaperScissors]]></title>
  <link href="http://lizard-spock.co.uk/blog/engineering/atom.xml" rel="self"/>
  <link href="http://lizard-spock.co.uk/"/>
  <updated>2015-10-10T12:34:16+01:00</updated>
  <id>http://lizard-spock.co.uk/</id>
  <author>
    <name><![CDATA[Morgan Prior]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Matlab: Linear Progressions]]></title>
    <link href="http://lizard-spock.co.uk/blog/engineering/matlab-linear-progressions/"/>
    <updated>2015-06-10T20:19:05+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/engineering/matlab-linear-progressions</id>
    <content type="html"><![CDATA[<p>Progressions can be created using the <a href="http://uk.mathworks.com/help/matlab/ref/colon.html">Colon</a> operator</p>

<pre><code>min   = 10
max   = 100
steps = 20

step_size = (max-min)/steps

i = min:step_size:max
</code></pre>

<p>Alternatively <a href="http://uk.mathworks.com/help/matlab/ref/linspace.html">linspace</a> can be used:</p>

<pre><code>min   = 10
max   = 100
steps = 20

i = linspace(min,max,steps)
</code></pre>

<p>This also allows for easily switching to a log scale using <a href="http://uk.mathworks.com/help/matlab/ref/logspace.html">logspace</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Matlab: Functions Inputs Parsed Based on Outputs]]></title>
    <link href="http://lizard-spock.co.uk/blog/engineering/matlab-functions-inputs-parsed-based-on-outputs/"/>
    <updated>2015-06-10T20:10:54+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/engineering/matlab-functions-inputs-parsed-based-on-outputs</id>
    <content type="html"><![CDATA[<p>It is quite common to detect how many input arguments have been passed to a function, using <code>nargin</code> (N arguments in).  Commonly used to set defaults for arguments not specified.</p>

<pre><code>function result = fun_name(a,b,c);
  if nargin &lt;1
    error('a must be supplied');
  end
  if nargin &lt;2
    b = 1; 
  end
  if nargin &lt;3
    c = 1;
  end

  % ...
</code></pre>

<p>However I just discovered <code>nargout</code> (N arguments out(.</p>

<p>This allows the scripts to differentiate between:</p>

<pre><code>x     = fun(a)
[x,y] = fun(a)
</code></pre>

<p>Example 1:</p>

<pre><code>function [ varargout ] = nargout_test( input_args )
  disp(['nargout : ', num2str(nargout)])

  % Set outputs
  for i=1:nargout
    varargout{i} = 0;
  end
end
</code></pre>

<p>Example 2, changing input args usage based on number of outputs:
note the input keyword change to the input arguments <code>varargin</code> Variable argument in.</p>

<pre><code>function [ varargout ] = nargout_test( varargin )
  disp(['nargin : ', num2str(nargin)])
  disp(['nargout : ', num2str(nargout)])

  if nargout &gt; 2
    error('Too many output arguments')
  end

  if nargout == 1
    % single output first input means something
    varargout{1} = varargin{1};
  end

  if nargout == 2
    % two outputs first input means some thing else
    varargout{1} = varargin{1} / varargin{2};
    varargout{2} = varargin{1} * varargin{2};
  end

end
</code></pre>

<p>A good example is the <a href="http://uk.mathworks.com/matlabcentral/fileexchange/13792-the-dc-blocking-filter/">dcblock script by J M De Freitas</a>.</p>

<p>Which has this syntax:</p>

<pre><code>% SYNTAX    [a] = dcblock(Fc);  
%           [a] = dcblock(fc,fs);  
%           [aQ] = dcblock(fc,fs,B);  
%           [Fc,fc] = dcblock(a,fs);  
%           dcblock(Fc)  
%           dcblock(fc,fs)  
%           dcblock(fc,fs,B)  
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SystemVerilog: RTL Types]]></title>
    <link href="http://lizard-spock.co.uk/blog/engineering/systemverilog-rtl-types/"/>
    <updated>2015-03-26T20:08:34+00:00</updated>
    <id>http://lizard-spock.co.uk/blog/engineering/systemverilog-rtl-types</id>
    <content type="html"><![CDATA[<p><code>reg</code> and <code>wire</code> were the original synthesisable types. Wires are constantly assigned and regs are evaluated at particular points, the advantage here is for the simulator to make optimisations.</p>

<pre><code>wire w_data;
assign w_data = y;

// Same function as above using reg
reg r_data;
always @* 
  r_data = y ;
</code></pre>

<p>A common mistake when learning Verilog is to assume the reg type implies a register in hardware. The earlier optimisation for the simulator can be done through the context of its usage.</p>

<p>This introduces <code>logic</code> which can be used in place of wire and reg.</p>

<pre><code>logic  w_data;
assign w_data = y;

// Same function as above using reg
logic r_data;
always @* 
  r_data = y ;
</code></pre>

<p>The type <code>bit</code> and <code>byte</code> have also been created that can only hold 2 states 0 or 1 no x or z. <code>byte</code> implies <code>bit [7:0]</code>. Using these types offers a small speed improvement but I would recommend not using them in RTL as your verification may miss uninitialized values or critical resets.</p>

<p>The usage of <code>bit</code> and <code>byte</code> would be more common in testbench components, but can lead to issues in case of having to drive x&rsquo;s to stimulate data corruption and recovery.</p>

<hr />

<p><strong>Update</strong></p>

<p>At the time of writing I was under the impression that <code>logic</code> could not be used for tristate, I am unable to find the original paper that I based this on. Until further updates, comments or edits, I revoke my assertion that <em>logic can not be used to create tri-state lines</em>.</p>

<hr />

<p>The <code>tri</code> type has been added, for explicitly defining a tri-state line. It is based on the properties of a <code>wire</code>, <code>logic</code> is based on the properties of a <code>reg</code>.</p>

<pre><code>tri t_data;
assign t_data = (drive) ? y : 1'bz ;
</code></pre>

<p>If you no longer have to support backwards compatibility Verilog then I would recommend switching to using <code>logic</code> and <code>tri</code>. Using <code>logic</code> aids re-factoring and and <code>tri</code>  reflects the design intent of a tristate line.</p>

<p>Originally posted as a<a href="http://stackoverflow.com/a/13285242/97073"> SO answer</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Verilog: Define if Not Defined]]></title>
    <link href="http://lizard-spock.co.uk/blog/engineering/verilog-define-if-not-defined/"/>
    <updated>2015-03-26T19:45:10+00:00</updated>
    <id>http://lizard-spock.co.uk/blog/engineering/verilog-define-if-not-defined</id>
    <content type="html"><![CDATA[<p>To set a default define option while allowing it to be overridden from the command line.</p>

<pre><code>`ifndef mode_sel
  `define mode_sel 0
`endif
</code></pre>

<p>The command line should override testbench defined options but this has proven unreliable.</p>

<p>command line to set value:</p>

<pre><code>irun -define mode_sel=1 ...
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Verilog: Shm Waveforms]]></title>
    <link href="http://lizard-spock.co.uk/blog/engineering/verilog-shm-waveforms/"/>
    <updated>2015-03-26T19:38:29+00:00</updated>
    <id>http://lizard-spock.co.uk/blog/engineering/verilog-shm-waveforms</id>
    <content type="html"><![CDATA[<p>The best practice is to use a tcl file:</p>

<p>shm.tcl</p>

<pre><code>database -open waves -shm
probe -create your_top_level -depth all -all -shm -database waves
run 
exit
</code></pre>

<p>run with :</p>

<pre><code>irun -access +r testcase.sv -input shm.tcl
</code></pre>

<p>Alternatively the following can be added to the simulation:</p>

<pre><code>initial begin
  $shm_open("waves.shm"); $shm_probe("AS");
end
</code></pre>

<p>run with <code>irun -access +r testcase.sv</code></p>

<p>NB: I have had trouble getting this last version to work, the tcl file method is more reliable.</p>
]]></content>
  </entry>
  
</feed>
