<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Engineering | RockPaperScissors]]></title>
  <link href="http://lizard-spock.co.uk/blog/engineering/atom.xml" rel="self"/>
  <link href="http://lizard-spock.co.uk/"/>
  <updated>2015-03-26T20:10:54+00:00</updated>
  <id>http://lizard-spock.co.uk/</id>
  <author>
    <name><![CDATA[Morgan Prior]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SystemVerilog: RTL Types]]></title>
    <link href="http://lizard-spock.co.uk/blog/engineering/systemverilog-rtl-types/"/>
    <updated>2015-03-26T20:08:34+00:00</updated>
    <id>http://lizard-spock.co.uk/blog/engineering/systemverilog-rtl-types</id>
    <content type="html"><![CDATA[<p><code>reg</code> and <code>wire</code> were the original synthesisable types. Wires are constantly assigned and regs are evaluated at particular points, the advantage here is for the simulator to make optimisations.</p>

<pre><code>wire w_data;
assign w_data = y;

// Same function as above using reg
reg r_data;
always @* 
  r_data = y ;
</code></pre>

<p>A common mistake when learning Verilog is to assume the reg type implies a register in hardware. The earlier optimisation for the simulator can be done through the context of its usage.</p>

<p>This introduces <code>logic</code> which can be used in place of wire and reg.</p>

<pre><code>logic  w_data;
assign w_data = y;

// Same function as above using reg
logic r_data;
always @* 
  r_data = y ;
</code></pre>

<p>The type <code>bit</code> and <code>byte</code> have also been created that can only hold 2 states 0 or 1 no x or z. <code>byte</code> implies <code>bit [7:0]</code>. Using these types offers a small speed improvement but I would recommend not using them in RTL as your verification may miss uninitialized values or critical resets.</p>

<p>The usage of <code>bit</code> and <code>byte</code> would be more common in testbench components, but can lead to issues in case of having to drive x&rsquo;s to stimulate data corruption and recovery.</p>

<hr />

<p><strong>Update</strong></p>

<p>At the time of writing I was under the impression that <code>logic</code> could not be used for tristate, I am unable to find the original paper that I based this on. Until further updates, comments or edits, I revoke my assertion that <em>logic can not be used to create tri-state lines</em>.</p>

<hr />

<p>The <code>tri</code> type has been added, for explicitly defining a tri-state line. It is based on the properties of a <code>wire</code>, <code>logic</code> is based on the properties of a <code>reg</code>.</p>

<pre><code>tri t_data;
assign t_data = (drive) ? y : 1'bz ;
</code></pre>

<p>If you no longer have to support backwards compatibility Verilog then I would recommend switching to using <code>logic</code> and <code>tri</code>. Using <code>logic</code> aids re-factoring and and <code>tri</code>  reflects the design intent of a tristate line.</p>

<p>Originally posted as a<a href="http://stackoverflow.com/a/13285242/97073"> SO answer</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Verilog: Define if Not Defined]]></title>
    <link href="http://lizard-spock.co.uk/blog/engineering/verilog-define-if-not-defined/"/>
    <updated>2015-03-26T19:45:10+00:00</updated>
    <id>http://lizard-spock.co.uk/blog/engineering/verilog-define-if-not-defined</id>
    <content type="html"><![CDATA[<p>To set a default define option while allowing it to be overridden from the command line.</p>

<pre><code>`ifndef mode_sel
  `define mode_sel 0
`endif
</code></pre>

<p>The command line should override testbench defined options but this has proven unreliable.</p>

<p>command line to set value:</p>

<pre><code>irun -define mode_sel=1 ...
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Verilog: Shm Waveforms]]></title>
    <link href="http://lizard-spock.co.uk/blog/engineering/verilog-shm-waveforms/"/>
    <updated>2015-03-26T19:38:29+00:00</updated>
    <id>http://lizard-spock.co.uk/blog/engineering/verilog-shm-waveforms</id>
    <content type="html"><![CDATA[<p>The best practice is to use a tcl file:</p>

<p>shm.tcl</p>

<pre><code>database -open waves -shm
probe -create your_top_level -depth all -all -shm -database waves
run 
exit
</code></pre>

<p>run with :</p>

<pre><code>irun -access +r testcase.sv -input shm.tcl
</code></pre>

<p>Alternatively the following can be added to the simulation:</p>

<pre><code>initial begin
  $shm_open("waves.shm"); $shm_probe("AS");
end
</code></pre>

<p>run with <code>irun -access +r testcase.sv</code></p>

<p>NB: I have had trouble getting this last version to work, the tcl file method is more reliable.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Verilog Timeformat]]></title>
    <link href="http://lizard-spock.co.uk/blog/engineering/verilog-timeformat/"/>
    <updated>2015-03-26T19:21:25+00:00</updated>
    <id>http://lizard-spock.co.uk/blog/engineering/verilog-timeformat</id>
    <content type="html"><![CDATA[<p>Time can be displayed during simulation using <code>%t</code>.</p>

<pre><code>$display("%t", $realtime);
</code></pre>

<p>Timeformat is used to control the way (<code>%t</code>) this is displayed:</p>

<pre><code>//$timeformat(unit#, prec#, "unit", minwidth);
$timeformat(-3, 2, " ms", 10); // -3 and " ms" give useful display msg
</code></pre>

<ol>
<li>unit is the base that time is to be displayed in, from 0 to -15</li>
<li>precision is the number of decimal points to display.</li>
<li>&ldquo;unit&rdquo; is a string appended to the time, such as &ldquo; ns&rdquo;.</li>
<li><p>minwidth is the minimum number of characters that will be displayed.</p>

<p>   0 = 1 sec
  -1 = 100 ms
  -2 = 10 ms
  -3 = 1 ms
  -4 = 100 us
  -5 = 10 us
  -6 = 1 us
  -7 = 100 ns
  -8 = 10 ns
  -9 = 1 ns
 -10 = 100 ps
 -11 = 10 ps
 -12 = 1 ps
 -13 = 100 fs
 -14 = 10 fs
 -15 = 1 fs</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SystemVerilog: Constrained Random]]></title>
    <link href="http://lizard-spock.co.uk/blog/engineering/systemverilog-constrained-random/"/>
    <updated>2015-02-18T17:01:56+00:00</updated>
    <id>http://lizard-spock.co.uk/blog/engineering/systemverilog-constrained-random</id>
    <content type="html"><![CDATA[<p>A minimal example of constrained random to constraining a 4 bit value to 0 to 11 when randomised.</p>

<pre><code>module tb;

  class cr_example_t
    rand bit val;
    rand bit [3:0] sel;

    constrain c1 {
      sel &lt; 12;
    }
  endclass

  cr_example_t cr_example = new;

  initial begin :test_program
    cr_example.randomise();
    $display(cr_example.val);
    $display(cr_example.sel);

    $finish;
  end

endmodule
</code></pre>
]]></content>
  </entry>
  
</feed>
