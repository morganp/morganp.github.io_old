<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Engineering | RockPaperScissors]]></title>
  <link href="http://morganp.github.io/blog/engineering/atom.xml" rel="self"/>
  <link href="http://morganp.github.io/"/>
  <updated>2014-02-18T21:18:32+00:00</updated>
  <id>http://morganp.github.io/</id>
  <author>
    <name><![CDATA[Morgan Prior]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Matlab: Legend Colours]]></title>
    <link href="http://morganp.github.io/blog/engineering/matlab-legend-colours/"/>
    <updated>2014-02-13T20:51:45+00:00</updated>
    <id>http://morganp.github.io/blog/engineering/matlab-legend-colours</id>
    <content type="html"><![CDATA[<p>When plotting several lines in Matlab, I have become aware of how hard it was to see the colours in the legend. Based <a href="http://www.mathworks.co.uk/matlabcentral/newsreader/view_thread/267186">on this matlabcentral question</a> I found an easy way to control the line thickness in the legend.</p>

<pre><code>plot(randn(100,1));
hold on;
plot(randn(100,1),'k');


[legh,objh,outh,outm] = legend('First','Second','Location','Southeast');
set(objh,'linewidth',2); %%&lt;-- set legend line thickness to 2
</code></pre>

<p>Or just the following after you define your legend:</p>

<pre><code>% legend('First','Second','Location','Southeast');

[legh,objh,outh,outm] = legend();
set(objh,'linewidth',2);
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Matlab Benchmarking]]></title>
    <link href="http://morganp.github.io/blog/engineering/matlab-benchmarking/"/>
    <updated>2014-02-12T20:55:42+00:00</updated>
    <id>http://morganp.github.io/blog/engineering/matlab-benchmarking</id>
    <content type="html"><![CDATA[<p>In the following example we test the allocation speed of different types:</p>

<pre><code>samples_to_avg = 10000;
for i=1:samples_to_avg
  tic; t = int8(zeros(32,2^16)); b(i) = toc;
end
avg_int8 = mean(b);

for i=1:samples_to_avg
  tic; t = zeros(32,2^16); b(i) = toc;
end
avg_double = mean(b);

%int 8 is
disp(['int8 pre-allocation is ', num2str(1 - avg_double/avg_int8), ' times faster than doubles'])
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Matlab Remove Values From Array]]></title>
    <link href="http://morganp.github.io/blog/engineering/matlab-remove-values-from-array/"/>
    <updated>2014-02-11T21:21:44+00:00</updated>
    <id>http://morganp.github.io/blog/engineering/matlab-remove-values-from-array</id>
    <content type="html"><![CDATA[<p>Remove all values of 3 from array</p>

<pre><code>a = [1 2 3 4 3];
a(any(a==3,1)) = []
a =


     1     2     4
</code></pre>

<p>Remove 2 or less from array</p>

<pre><code>a = [1 2 3 4 3];
a(any(a&lt;=2,1)) = []
a =


     3     4     3
</code></pre>

<p>Remove values between 2 and 3</p>

<pre><code>a = [1 2 3 4 3];
a(any((a&gt;=2)&amp;(a&lt;=3),1)) = []
a =


     1     4
</code></pre>

<p>Based on <a href="http://matlabnewbie.blogspot.co.uk/2011/11/remove-any-rows-that-contains-specific.html">examples from matlabnewbie</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flip-flop]]></title>
    <link href="http://morganp.github.io/blog/engineering/flip-flop/"/>
    <updated>2014-01-09T19:15:10+00:00</updated>
    <id>http://morganp.github.io/blog/engineering/flip-flop</id>
    <content type="html"><![CDATA[<p>A flip-flop (D-Type) is essentially 2 latches in series with the enable to one inverted.
This stops the flip-flop from being transparent or open as a single latch can be.</p>

<p>For ASIC design it is recommended that all flip-flops use active low asynchronous resets.
This is often connected to the power on reset circuit and retimed on to the rising edge of the clock at the top level of the chip.</p>

<p>In Verilog a D-Type flip-flop can be implied with the following logic.<br/>
NB: the reg implies nothing about the flip-flop only that data is assigned inside an always block.</p>

<pre><code>reg [1:0] data; 
always @(posedge clk or negedge rst_n) begin
  if (~rst_n) begin
    data &lt;= 'b0;
  end
  else begin
    data &lt;= new_data;
  end
end
</code></pre>

<p>If your flow supports the use of SystemVerilog, use of the <code>always_comb</code>, <code>always_latch</code> and <code>always_ff</code> are recommended.
the rules for sensitivity lists are a little stricter to minimize RTL to gates mismatch.
The added benefit is that it allows the designer to be clear about design intent.
Using the logic type also removes confusion about reg implying flip-flops and allows code refacoring with out having to switch types.</p>

<pre><code>logic [1:0] data; 
always_ff @(posedge clk or negedge rst_n) begin
  if (~rst_n) begin
    data &lt;= 'b0;
  end
  else begin
    data &lt;= new_data;
  end
end
</code></pre>

<p>With a Synchronous Reset:</p>

<pre><code>logic [1:0] data; 
always_ff @(posedge clk) begin
  if (~rst_n) begin
    data &lt;= 'b0;
  end
  else begin
    data &lt;= new_data;
  end
end
</code></pre>

<p>No Reset:</p>

<pre><code>logic [1:0] data; 
always_ff @(posedge clk) begin
  data &lt;= new_data;
end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Matlab Repeat a Matrix N Times]]></title>
    <link href="http://morganp.github.io/blog/engineering/matlab-repeat-a-matrix-n-times/"/>
    <updated>2013-11-27T10:57:36+00:00</updated>
    <id>http://morganp.github.io/blog/engineering/Matlab-repeat-a-matrix-n-times</id>
    <content type="html"><![CDATA[<p>repmat(matrix, [repeat_y, repeat_x])</p>

<p>Horizontal</p>

<pre><code>repmat([1 2 3],[1,4])

ans =

     1     2     3     1     2     3     1     2     3     1     2     3
</code></pre>

<p>Vertical</p>

<pre><code>repmat([1; 2; 3],[4,1])

ans =

     1
     2
     3
     1
     2
     3
     1
     2
     3
     1
     2
     3
</code></pre>
]]></content>
  </entry>
  
</feed>
