<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Engineering | RockPaperScissors]]></title>
  <link href="http://lizard-spock.co.uk/blog/engineering/atom.xml" rel="self"/>
  <link href="http://lizard-spock.co.uk/"/>
  <updated>2014-05-05T21:23:48+01:00</updated>
  <id>http://lizard-spock.co.uk/</id>
  <author>
    <name><![CDATA[Morgan Prior]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Verilog Importing Envvar]]></title>
    <link href="http://lizard-spock.co.uk/blog/engineering/verilog-importing-envvar/"/>
    <updated>2014-04-03T18:22:00+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/engineering/verilog-importing-envvar</id>
    <content type="html"><![CDATA[<p>Based on a <a href="http://stackoverflow.com/a/15103561/97073">Stackoverflow answer</a>, to import environment variables into Verilog you can use:</p>

<pre><code>import "DPI-C" function string getenv(input string env_name);

module top;
  initial begin
    $write("env = %s\n", {getenv("HOME"), "/FileName"});
  end
endmodule
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Matlab: Leading 0's]]></title>
    <link href="http://lizard-spock.co.uk/blog/engineering/matlab-leading-0-s/"/>
    <updated>2014-03-25T20:52:35+00:00</updated>
    <id>http://lizard-spock.co.uk/blog/engineering/matlab-leading-0-s</id>
    <content type="html"><![CDATA[<p>For adding leading zeros to a number the following can be used for 4 decimal places with integer input:</p>

<pre><code>dat = 1;
sprintf(['%4.4d'], dat)
</code></pre>

<p>To make this programmable the following can be used:</p>

<pre><code>dat       = 1;
min_width = 4;
sprintf(['%',num2str(min_width),'.', num2str(min_width),'d'], 1)
</code></pre>

<p>For string inputs you need:</p>

<pre><code>dat       = '1'
min_width = 4;
sprintf(['%0',num2str(6),'s'], dat)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Matlab Wrapper Scripts]]></title>
    <link href="http://lizard-spock.co.uk/blog/engineering/matlab-wrapper-scripts/"/>
    <updated>2014-03-17T19:48:57+00:00</updated>
    <id>http://lizard-spock.co.uk/blog/engineering/matlab-wrapper-scripts</id>
    <content type="html"><![CDATA[<p>To wrap a function with variable input arguments and pass them all on to the wrapped function.
Based on a <a href="http://stackoverflow.com/questions/4895556/how-to-wrap-a-function-using-varargin-and-varargout">StackOverflow answer</a>:</p>

<pre><code>function varargout = wrapper( varargin )
[varargout{1:nargout}] = someFunction( varargin{:} ); 
</code></pre>

<p>Used in the <a href="https://github.com/Matlab-Toolbox/printf">printf toolbox</a>: where we wrap fprint to print directly to stdout.</p>

<pre><code>function printf( varargin )
  fprintf(1, varargin{:}); 
end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Matlab Sort_by]]></title>
    <link href="http://lizard-spock.co.uk/blog/engineering/matlab-sort-by/"/>
    <updated>2014-03-17T18:55:11+00:00</updated>
    <id>http://lizard-spock.co.uk/blog/engineering/matlab-sort-by</id>
    <content type="html"><![CDATA[<p>In ruby we can perform schwartzian transforms easily with the sort_by method. This allows sorting enumerators by any property.</p>

<p>For example to do a non case sensitive sort:</p>

<pre><code>some_array.sort_by { |x| x.downcase }
</code></pre>

<p><a href="http://blogs.mathworks.com/pick/2010/09/17/sorting-structure-arrays-based-on-fields/">Based on this Mathworks blog</a>, I have ported the <a href="http://www.mathworks.com/matlabcentral/fileexchange/28573-nested-sort-of-structure-arrays">Matlab central code</a> to a <a href="https://github.com/Matlab-Toolbox/nested_sort">Toolbox on Github</a>.</p>

<p>After Downloading the toolbox and adding the functions folder to your path.</p>

<pre><code>addpath('../lib/nested_sort/function/');
</code></pre>

<p>Basic usage is:</p>

<pre><code>A = struct('name', num2cell(1:4), 'value', {5,2,3,1});
B=sortStruct(A,'value');
</code></pre>

<p>B is A sorted by &lsquo;value&rsquo;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beyond the LSB]]></title>
    <link href="http://lizard-spock.co.uk/blog/engineering/beyond-the-lsb/"/>
    <updated>2014-03-13T19:07:42+00:00</updated>
    <id>http://lizard-spock.co.uk/blog/engineering/beyond-the-lsb</id>
    <content type="html"><![CDATA[<p>If we truncate a number, that is to throw away the LSBs (least significant bits) we loose resolution.</p>

<p>A 4 bit number truncated to 2 bits: <em>numbers shown in binary (Base2).</em></p>

<pre><code>0100
0101
0110
0111 
</code></pre>

<p>Would all become 01.</p>

<h1>Introducing Dither</h1>

<p>Effective dithering increase the accuracy beyond the LSB of the truncated values.
Consider a small fractional value rounded to an integer. Starting with 0.5 with 1 bit random dither:</p>

<pre><code>Input  Dither Sum &amp; truncate
00.1   0.1    01
00.1   0.0    00
00.1   0.1    01
00.1   0.0    00
Average over 4 samples is 0.5
</code></pre>

<p>If the value is below 0.5 this dither scheme will not work, as it would never
round to a full integer.</p>

<p>So we increase the dither to 2 bits. Inputting a constant 0.25, Dither cycling
through all possible values</p>

<pre><code>Input  Dither Sum &amp; truncate
00.01  0.00   00
00.01  0.01   00
00.01  0.10   00
00.01  0.11   01
Average of 4 Samples 0.25
</code></pre>

<p>In the above example we have increased the resolution of the time averaged value
by 2 bits.</p>

<p>For every doubling of the frequency we gain an effective LSB if dithered correctly.
Adding more bits than <code>log2(oversampling rate)</code> of dithering will not gain accuracy.
Although it may help breakup tonal behaviour of a system.</p>

<h2>Summary</h2>

<p>Apply dither to the bits to be truncated. Apply enough bits of dither so it is
possible for the LSB of the required resolution to effect the truncated value.</p>

<p>The increase in resolution is limited to <code>log2(oversampling rate)</code>.</p>
]]></content>
  </entry>
  
</feed>
