<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Engineering | RockPaperScissors]]></title>
  <link href="http://lizard-spock.co.uk/blog/engineering/atom.xml" rel="self"/>
  <link href="http://lizard-spock.co.uk/"/>
  <updated>2015-03-26T19:25:13+00:00</updated>
  <id>http://lizard-spock.co.uk/</id>
  <author>
    <name><![CDATA[Morgan Prior]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Verilog Timeformat]]></title>
    <link href="http://lizard-spock.co.uk/blog/engineering/verilog-timeformat/"/>
    <updated>2015-03-26T19:21:25+00:00</updated>
    <id>http://lizard-spock.co.uk/blog/engineering/verilog-timeformat</id>
    <content type="html"><![CDATA[<p>Time can be displayed during simulation using <code>%t</code>.</p>

<pre><code>$display("%t", $realtime);
</code></pre>

<p>Timeformat is used to control the way (<code>%t</code>) this is displayed:</p>

<pre><code>//$timeformat(unit#, prec#, "unit", minwidth);
$timeformat(-3, 2, " ms", 10); // -3 and " ms" give useful display msg
</code></pre>

<ol>
<li>unit is the base that time is to be displayed in, from 0 to -15</li>
<li>precision is the number of decimal points to display.</li>
<li>&ldquo;unit&rdquo; is a string appended to the time, such as &ldquo; ns&rdquo;.</li>
<li><p>minwidth is the minimum number of characters that will be displayed.</p>

<p>   0 = 1 sec
  -1 = 100 ms
  -2 = 10 ms
  -3 = 1 ms
  -4 = 100 us
  -5 = 10 us
  -6 = 1 us
  -7 = 100 ns
  -8 = 10 ns
  -9 = 1 ns
 -10 = 100 ps
 -11 = 10 ps
 -12 = 1 ps
 -13 = 100 fs
 -14 = 10 fs
 -15 = 1 fs</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SystemVerilog: Constrained Random]]></title>
    <link href="http://lizard-spock.co.uk/blog/engineering/systemverilog-constrained-random/"/>
    <updated>2015-02-18T17:01:56+00:00</updated>
    <id>http://lizard-spock.co.uk/blog/engineering/systemverilog-constrained-random</id>
    <content type="html"><![CDATA[<p>A minimal example of constrained random to constraining a 4 bit value to 0 to 11 when randomised.</p>

<pre><code>module tb;

  class cr_example_t
    rand bit val;
    rand bit [3:0] sel;

    constrain c1 {
      sel &lt; 12;
    }
  endclass

  cr_example_t cr_example = new;

  initial begin :test_program
    cr_example.randomise();
    $display(cr_example.val);
    $display(cr_example.sel);

    $finish;
  end

endmodule
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Verilog: Thermometer Code]]></title>
    <link href="http://lizard-spock.co.uk/blog/engineering/verilog-thermometer-code/"/>
    <updated>2015-02-18T16:51:43+00:00</updated>
    <id>http://lizard-spock.co.uk/blog/engineering/verilog-thermometer-code</id>
    <content type="html"><![CDATA[<p>Efficiently create a <a href="http://en.wikipedia.org/wiki/Unary_coding">thermometer code</a> in verilog:</p>

<pre><code>localparam M = 32;

function [M-1:0] therm_code;
  input    [$clog2(M):0] val;
  begin
    for (int i = 0; i&lt;M; i++) begin
      therm_code[i] = (i&lt;val);
    end
  end
endfunction
</code></pre>

<p>Other methods which do not synthesis as well:</p>

<pre><code>therm_code  = (2**val) - 1;

therm_code = ~({M{1'b1}} &lt;&lt; val);
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Verilog: Calculate Primes]]></title>
    <link href="http://lizard-spock.co.uk/blog/engineering/verilog-calculate-primes/"/>
    <updated>2014-12-20T07:28:41+00:00</updated>
    <id>http://lizard-spock.co.uk/blog/engineering/verilog-calculate-primes</id>
    <content type="html"><![CDATA[<p>Based on my answer to <a href="http://stackoverflow.com/q/27461173/97073">this SO Question</a>.</p>

<p><strong><a href="http://www.mathsisfun.com/definitions/prime-number.html">Definition of Prime</a>:</strong></p>

<blockquote><p>A Prime Number can be divided evenly only by 1, or itself.
And it must be a whole number greater than 1.</p></blockquote>

<p>A simple method would be to iterate over numbers 2 to N, checking if it was divisible by all natural numbers greater than 2, and below the current value.</p>

<p>Once checked that it is not divisible by 2 there is not point checking for 4, 6, 8 etc.
Remembering the definition of prime all numbers that are not prime are integer multiples of prime. so we have reduced the amount of work involved in testing primality.</p>

<pre><code>parameter        N        = 1000;          
reg       [31:0] prime_number [0:N-1]; Store 0 to N prime numbers
integer          test     ; // Result of primality test
integer          k        ; // Currently looking for k'th prime 
integer          index    ; // Counts 1 to k, indexing previous primes 
integer          number_ut; // Number Under test

reg        [1:0] state   ; 
localparam       S_INC   = 2'b01;
localparam       S_CHECK = 2'b10;

initial begin
  prime_number[0] = 'd2; //Preload first Prime
  state           = S_CHECK; //Check set count first
  number_ut       = 'd3; // Number Under Test
  k               = 'd1; // Position 0 preloaded
  index           = 'd0;
  test            = 'd1;
end

always @(posedge clk ) begin
  if (state == S_INC) begin
    number_ut &lt;= number_ut+1 ;
    state     &lt;= S_CHECK ;
    index     &lt;= 'd0;
    test      &lt;= 'd1; // Safe default
  end
  else if (state == S_CHECK) begin
    if (test == 0) begin
      // Failed Prime test (exact divisor found)
      $display("Reject %3d", number_ut);
      state           &lt;= S_INC ;
    end
    else if (index == k) begin
      //Passed Prime check
      //Use k+1 so that 2 is number 1, 3 is 2nd etc
      $display("Found the %1d th Prime, it is %1d", k+1, number_ut);
      prime_number[k] &lt;= number_ut;
      k               &lt;= k + 1;
      state           &lt;= S_INC ;
    end
    else begin
      test  &lt;= number_ut % prime_number[index] ;
      index &lt;= index + 1;          
    end
  end
end
</code></pre>

<p><a href="http://www.edaplayground.com/x/BzX">Example on EDA Playground</a>.</p>

<p>This is however just a programming exercise as the resulting hardware is likely substantially bigger than just implementing a look up table to the maxim number of primes you can fit in <code>prime_number</code>. The look up table will also be ready from time zero and not need to recompute every time you power up.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Submit to SGE as if Working Locally]]></title>
    <link href="http://lizard-spock.co.uk/blog/engineering/submit-to-sge-as-if-working-locally/"/>
    <updated>2014-07-30T20:13:23+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/engineering/submit-to-sge-as-if-working-locally</id>
    <content type="html"><![CDATA[<p>Setting an alias in you .tcshrc</p>

<pre><code>alias qrun 'qrsh -V -noshell -cwd !*'
</code></pre>

<p>or bash</p>

<pre><code>alias qrun='qrsh -V -noshell -cwd !*'
</code></pre>

<p>Which makes submitting any script to the grid just:</p>

<pre><code>qrun helloworld.sh
</code></pre>

<p>Originally asked on <a href="http://superuser.com/a/751162/42141">superuser</a>.</p>
]]></content>
  </entry>
  
</feed>
