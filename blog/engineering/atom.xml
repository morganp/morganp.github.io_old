<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Engineering | RockPaperScissors]]></title>
  <link href="http://morganp.github.io/blog/engineering/atom.xml" rel="self"/>
  <link href="http://morganp.github.io/"/>
  <updated>2014-02-11T21:28:46+00:00</updated>
  <id>http://morganp.github.io/</id>
  <author>
    <name><![CDATA[Morgan Prior]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Matlab Remove Values From Array]]></title>
    <link href="http://morganp.github.io/blog/engineering/matlab-remove-values-from-array/"/>
    <updated>2014-02-11T21:21:44+00:00</updated>
    <id>http://morganp.github.io/blog/engineering/matlab-remove-values-from-array</id>
    <content type="html"><![CDATA[<p>Remove all values of 3 from array</p>

<pre><code>a = [1 2 3 4 3];
a(any(a==3,1)) = []
a =


     1     2     4
</code></pre>

<p>Remove 2 or less from array</p>

<pre><code>a = [1 2 3 4 3];
a(any(a&lt;=2,1)) = []
a =


     3     4     3
</code></pre>

<p>Remove values between 2 and 3</p>

<pre><code>a = [1 2 3 4 3];
a(any((a&gt;=2)&amp;(a&lt;=3),1)) = []
a =


     1     4
</code></pre>

<p>Based on <a href="http://matlabnewbie.blogspot.co.uk/2011/11/remove-any-rows-that-contains-specific.html">examples from matlabnewbie</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flip-flop]]></title>
    <link href="http://morganp.github.io/blog/engineering/flip-flop/"/>
    <updated>2014-01-09T19:15:10+00:00</updated>
    <id>http://morganp.github.io/blog/engineering/flip-flop</id>
    <content type="html"><![CDATA[<p>A flip-flop (D-Type) is essentially 2 latches in series with the enable to one inverted.
This stops the flip-flop from being transparent or open as a single latch can be.</p>

<p>For ASIC design it is recommended that all flip-flops use active low asynchronous resets.
This is often connected to the power on reset circuit and retimed on to the rising edge of the clock at the top level of the chip.</p>

<p>In Verilog a D-Type flip-flop can be implied with the following logic.<br/>
NB: the reg implies nothing about the flip-flop only that data is assigned inside an always block.</p>

<pre><code>reg [1:0] data; 
always @(posedge clk or negedge rst_n) begin
  if (~rst_n) begin
    data &lt;= 'b0;
  end
  else begin
    data &lt;= new_data;
  end
end
</code></pre>

<p>If your flow supports the use of SystemVerilog, use of the <code>always_comb</code>, <code>always_latch</code> and <code>always_ff</code> are recommended.
the rules for sensitivity lists are a little stricter to minimize RTL to gates mismatch.
The added benefit is that it allows the designer to be clear about design intent.
Using the logic type also removes confusion about reg implying flip-flops and allows code refacoring with out having to switch types.</p>

<pre><code>logic [1:0] data; 
always_ff @(posedge clk or negedge rst_n) begin
  if (~rst_n) begin
    data &lt;= 'b0;
  end
  else begin
    data &lt;= new_data;
  end
end
</code></pre>

<p>With a Synchronous Reset:</p>

<pre><code>logic [1:0] data; 
always_ff @(posedge clk) begin
  if (~rst_n) begin
    data &lt;= 'b0;
  end
  else begin
    data &lt;= new_data;
  end
end
</code></pre>

<p>No Reset:</p>

<pre><code>logic [1:0] data; 
always_ff @(posedge clk) begin
  data &lt;= new_data;
end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Matlab Repeat a Matrix N Times]]></title>
    <link href="http://morganp.github.io/blog/engineering/matlab-repeat-a-matrix-n-times/"/>
    <updated>2013-11-27T10:57:36+00:00</updated>
    <id>http://morganp.github.io/blog/engineering/Matlab-repeat-a-matrix-n-times</id>
    <content type="html"><![CDATA[<p>repmat(matrix, [repeat_y, repeat_x])</p>

<p>Horizontal</p>

<pre><code>repmat([1 2 3],[1,4])

ans =

     1     2     3     1     2     3     1     2     3     1     2     3
</code></pre>

<p>Vertical</p>

<pre><code>repmat([1; 2; 3],[4,1])

ans =

     1
     2
     3
     1
     2
     3
     1
     2
     3
     1
     2
     3
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Matlab Setting Simulink Simulation Stop Time]]></title>
    <link href="http://morganp.github.io/blog/engineering/matlab-setting-simulink-simulation-stop-time/"/>
    <updated>2013-10-29T19:17:44+00:00</updated>
    <id>http://morganp.github.io/blog/engineering/Matlab-setting-Simulink-simulation-stop-time</id>
    <content type="html"><![CDATA[<p>Running the Simulink model model.mdl from matlab for a specified time:</p>

<pre><code>sim('model', stoptime)
</code></pre>

<p>Where stoptime is a number. To mix with other options such eg. SimulationMode, things get a little trickier.</p>

<pre><code>sim( 'model', 'SimulationMode', 'normal')
</code></pre>

<p>you would expect:</p>

<pre><code>sim( 'model', 'SimulationMode', 'normal', 'StopTime', 1)
</code></pre>

<p>but this results in :</p>

<pre><code>Invalid setting in block_diagram 'model' for parameter 'StopTime'
</code></pre>

<p>The trick is that parameter, value pairs must be strings, what you actually need to do is:</p>

<pre><code>sim( 'model', 'SimulationMode', 'normal', 'StopTime', num2str(1) )
</code></pre>

<p>Or you can create an ParameterStruct,</p>

<pre><code>SimOpts.SimulationMode = 'normal';
SimOpts.StopTime       = num2str(1);
sim( 'model', SimOpts )
</code></pre>

<p>Both of these methods change the way in which the to_workspace blocks work, instead of just outputting a variable to the workspace or available in the calling function sim now returns an &lsquo;Simulink.SimulationOutput&rsquo; object.</p>

<p>Instead of just accessing &lsquo;simout&rsquo; you know need to capture the sim output and use the get command to retrieve the data :</p>

<pre><code>simdata = sim( 'model', SimOpts ) ;
simdata.get('simout' )
</code></pre>

<p><a href="http://www.mathworks.co.uk/help/simulink/ug/using-the-sim-command.html">Further Info on the sim command</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Matlab Arrays for Equality.]]></title>
    <link href="http://morganp.github.io/blog/engineering/testing-matlab-arrays-for-equality/"/>
    <updated>2013-02-16T21:22:07+00:00</updated>
    <id>http://morganp.github.io/blog/engineering/Testing-Matlab-Arrays-for-Equality</id>
    <content type="html"><![CDATA[<p>Testing a matlab array for equality can be doen a few different was some have surprising side effects if your not use to working with vectorised testing.</p>

<p>Initial test :</p>

<pre><code>a = [1,2,3];
if (a == [1,2,3])
  disp('equal')
end

&gt; equal
</code></pre>

<p>Seems easy, But what happens if the dimensions of the array are incorrect?</p>

<pre><code>a = [1,2,3];
if (a == [1,2,3,4])
  disp('equal')
end

Error using  == 
Matrix dimensions must agree
</code></pre>

<p>May be if we check dimensions first using short-circuiting (<code>&amp;&amp;</code>) operators. NB: Short circuiting operators only execute if required, if it failed on the left hand side the right side will not be evaluated.</p>

<pre><code>a = [1,2,3];
if ((length(a) == 4) &amp;&amp; (a == [1,2,3,4]))
  disp('equal')
end
</code></pre>

<p>So far so good, but lets check it will also pass:</p>

<pre><code>a = [1,2,3];
if ((length(a) == 3) &amp;&amp; (a == [1,2,3]))
  disp('equal')
end

Operands to the || and &amp;&amp; operators must be convertible to logical scalar
values.
</code></pre>

<p>This is where it got interesting for me:</p>

<pre><code>a ==[1,2,3]
ans =

 1     1     1
</code></pre>

<p>The basic equality <code>==</code>  test for arrays is vectorised. When this is the only test it gets reduced down to true or false, but can not be combined with scalars.</p>

<p>Then I the discovered the <a href="http://www.mathworks.co.uk/help/matlab/ref/isequal.html">isequal</a> function.</p>

<pre><code>a = [1,2,3];
isequal(a, [1,2,3])

ans =

     1

a = [1,2,3];
isequal(a, [1,2,3,4])

ans =

     0
</code></pre>

<p>For direct comparisons of arrays use <code>isequal(a,b)</code> for vectorised operations use <code>a==b</code>.</p>
]]></content>
  </entry>
  
</feed>
