<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Engineering | RockPaperScissors]]></title>
  <link href="http://lizard-spock.co.uk/blog/engineering/atom.xml" rel="self"/>
  <link href="http://lizard-spock.co.uk/"/>
  <updated>2014-12-20T07:59:37+00:00</updated>
  <id>http://lizard-spock.co.uk/</id>
  <author>
    <name><![CDATA[Morgan Prior]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Verilog: Calculate Primes]]></title>
    <link href="http://lizard-spock.co.uk/blog/engineering/verilog-calculate-primes/"/>
    <updated>2014-12-20T07:28:41+00:00</updated>
    <id>http://lizard-spock.co.uk/blog/engineering/verilog-calculate-primes</id>
    <content type="html"><![CDATA[<p>Based on my answer to <a href="http://stackoverflow.com/q/27461173/97073">this SO Question</a>.</p>

<p><strong><a href="http://www.mathsisfun.com/definitions/prime-number.html">Definition of Prime</a>:</strong></p>

<blockquote><p>A Prime Number can be divided evenly only by 1, or itself.
And it must be a whole number greater than 1.</p></blockquote>

<p>A simple method would be to iterate over numbers 2 to N, checking if it was divisible by all natural numbers greater than 2, and below the current value.</p>

<p>Once checked that it is not divisible by 2 there is not point checking for 4, 6, 8 etc.
Remembering the definition of prime all numbers that are not prime are integer multiples of prime. so we have reduced the amount of work involved in testing primality.</p>

<pre><code>parameter        N        = 1000;          
reg       [31:0] prime_number [0:N-1]; Store 0 to N prime numbers
integer          test     ; // Result of primality test
integer          k        ; // Currently looking for k'th prime 
integer          index    ; // Counts 1 to k, indexing previous primes 
integer          number_ut; // Number Under test

reg        [1:0] state   ; 
localparam       S_INC   = 2'b01;
localparam       S_CHECK = 2'b10;

initial begin
  prime_number[0] = 'd2; //Preload first Prime
  state           = S_CHECK; //Check set count first
  number_ut       = 'd3; // Number Under Test
  k               = 'd1; // Position 0 preloaded
  index           = 'd0;
  test            = 'd1;
end

always @(posedge clk ) begin
  if (state == S_INC) begin
    number_ut &lt;= number_ut+1 ;
    state     &lt;= S_CHECK ;
    index     &lt;= 'd0;
    test      &lt;= 'd1; // Safe default
  end
  else if (state == S_CHECK) begin
    if (test == 0) begin
      // Failed Prime test (exact divisor found)
      $display("Reject %3d", number_ut);
      state           &lt;= S_INC ;
    end
    else if (index == k) begin
      //Passed Prime check
      //Use k+1 so that 2 is number 1, 3 is 2nd etc
      $display("Found the %1d th Prime, it is %1d", k+1, number_ut);
      prime_number[k] &lt;= number_ut;
      k               &lt;= k + 1;
      state           &lt;= S_INC ;
    end
    else begin
      test  &lt;= number_ut % prime_number[index] ;
      index &lt;= index + 1;          
    end
  end
end
</code></pre>

<p><a href="http://www.edaplayground.com/x/BzX">Example on EDA Playground</a>.</p>

<p>This is however just a programming exercise as the resulting hardware is likely substantially bigger than just implementing a look up table to the maxim number of primes you can fit in <code>prime_number</code>. The look up table will also be ready from time zero and not need to recompute every time you power up.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Submit to SGE as if Working Locally]]></title>
    <link href="http://lizard-spock.co.uk/blog/engineering/submit-to-sge-as-if-working-locally/"/>
    <updated>2014-07-30T20:13:23+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/engineering/submit-to-sge-as-if-working-locally</id>
    <content type="html"><![CDATA[<p>Setting an alias in you .tcshrc</p>

<pre><code>alias qrun 'qrsh -V -noshell -cwd !*'
</code></pre>

<p>or bash</p>

<pre><code>alias qrun='qrsh -V -noshell -cwd !*'
</code></pre>

<p>Which makes submitting any script to the grid just:</p>

<pre><code>qrun helloworld.sh
</code></pre>

<p>Originally asked on <a href="http://superuser.com/a/751162/42141">superuser</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simulink: Scroll Wheel Erratic Behaviour]]></title>
    <link href="http://lizard-spock.co.uk/blog/engineering/simulink-scroll-wheel-erratic-behaviour/"/>
    <updated>2014-07-30T20:08:10+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/engineering/simulink-scroll-wheel-erratic-behaviour</id>
    <content type="html"><![CDATA[<p>On Mac OS X matlab behaves quite oddly with the track pad zooming
in and out very quickly and erratically to remove this behaviour
<strong>Disable Mouse Scroll Wheel Zoom Behavior</strong>.</p>

<p>To disable the zoom behavior for the scroll wheel:</p>

<pre><code>File &gt; 
  Simulink Preferences &gt; 
    Editor Defaults &gt; 
      Scroll wheel controls zooming preference.
</code></pre>

<p>If you hold the Ctrl key and use the scroll wheel, the scroll wheel behavior is the opposite of how the preference is set.</p>

<p><a href="http://www.mathworks.co.uk/help/simulink/ug/zooming-block-diagrams.html">source</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simulink: Globally Set Sample Time]]></title>
    <link href="http://lizard-spock.co.uk/blog/engineering/simulink-globally-set-sample-time/"/>
    <updated>2014-07-30T20:01:49+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/engineering/simulink-globally-set-sample-time</id>
    <content type="html"><![CDATA[<p>To set each constant in a model to sample time -1:</p>

<pre><code>blks = find_system(dut, 'BlockType', 'Constant');
for i = 1:length(blks)
    set_param(blks{i}, 'SampleTime', '-1');
 end
</code></pre>

<p><a href="http://www.mathworks.co.uk/help/hdlcoder/ug/resource-sharing.html#btg_5ht-1">Source</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simulink: List Programmable Block Properties]]></title>
    <link href="http://lizard-spock.co.uk/blog/engineering/simulink-list-programmable-block-properties/"/>
    <updated>2014-07-30T20:00:28+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/engineering/simulink-list-programmable-block-properties</id>
    <content type="html"><![CDATA[<p>Select a block ie gain in Simulink then in Matlab type:</p>

<pre><code>get(gcbh)
</code></pre>

<p>This shows the list of properties which can be controlled from Matlab. TO change one for example changing the gain paramter from double to a 10 bit fixed point number (<code>sfix10_en9</code>).</p>

<pre><code>set_param(gcbh, 'ParamDataTypeStr', 'fixdt(1,10,9)'); 
</code></pre>

<p><a href="http://www.mathworks.co.uk/matlabcentral/newsreader/view_thread/306640">From Matlab Central</a>.</p>
]]></content>
  </entry>
  
</feed>
