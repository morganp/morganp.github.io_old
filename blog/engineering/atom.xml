<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Engineering | RockPaperScissors]]></title>
  <link href="http://lizard-spock.co.uk/blog/engineering/atom.xml" rel="self"/>
  <link href="http://lizard-spock.co.uk/"/>
  <updated>2014-05-28T18:59:46+01:00</updated>
  <id>http://lizard-spock.co.uk/</id>
  <author>
    <name><![CDATA[Morgan Prior]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Matlab Toolboxes with Absolute Path Setup]]></title>
    <link href="http://lizard-spock.co.uk/blog/engineering/matlab-toolboxes-with-absolute-path-setup/"/>
    <updated>2014-05-07T18:22:48+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/engineering/matlab-toolboxes-with-absolute-path-setup</id>
    <content type="html"><![CDATA[<p>When a script or function is called with <code>run(./relative/path/script)</code> the working directory is changed to the <code>./relative/path</code>. This means <code>pwd</code> it can be used to specify absolute paths:</p>

<pre><code>run(./libs/example_toolbox/load_toolbox)
</code></pre>

<p>Which contains :</p>

<pre><code>addpath([pwd, '/function']);
</code></pre>

<p>Now  The path will contain <code>C:/ ... /libs/example_toolbox/function</code></p>

<p>As shown in the example this is useful for toolboxes etc which could be distributed with a top level script which adds the toolbox functions on to the path.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Matlab: Array Content Check]]></title>
    <link href="http://lizard-spock.co.uk/blog/engineering/matlab-array-content-check/"/>
    <updated>2014-05-07T18:13:24+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/engineering/matlab-array-content-check</id>
    <content type="html"><![CDATA[<p>Checking if an Array contains a number:</p>

<pre><code>input = [1,2,3,4];
check = 4;
any(input==4)
</code></pre>

<p>Check if a number is contained in an array:</p>

<pre><code>input = 32;
check = [32,64,128];
any( check==input )
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Matlab: Split Odd &amp; Even Array Elements]]></title>
    <link href="http://lizard-spock.co.uk/blog/engineering/matlab-split-odd-and-even-array-elements/"/>
    <updated>2014-05-07T17:58:33+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/engineering/matlab-split-odd-and-even-array-elements</id>
    <content type="html"><![CDATA[<p>Using Matlab to splitting data into odd and even samples.</p>

<p>A for loop approach:</p>

<pre><code>data_odd  = [];
data_even = [];
for i = 1:length(data)
  if mod(i,2)
    %% disp('odd')
    data_odd = [data_odd, data(i)]
  else
    %% disp('even')
    data_even = [data_even, data(i)]
  end
end
</code></pre>

<p>Matlab approach using ranges to remap values:</p>

<pre><code>data_odd =data(1:2:end);
data_even=data(2:2:end);
</code></pre>

<p>Ranges are composed of <code>start_index:step_size:end_index</code>. If step_size is omitted, 1 is assumed.</p>

<p><code>end</code> has a special meaning when used inside an array, it is the position of the last element.
To append to an array you could use <code>data(end+1) = append_value</code></p>

<p>No error or warning is triggered if the <code>end_index</code> can not be reached with the given step size, which is why this works with <code>end</code> as the stop point of both sides.</p>

<h2>Example</h2>

<pre><code>a   = [1, 2, 3, 4, 5];
odd = a(1:2:end)
even= a(2:2:end)

odd =
     1     3     5

even =
     2     4
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Verilog Importing Envvar]]></title>
    <link href="http://lizard-spock.co.uk/blog/engineering/verilog-importing-envvar/"/>
    <updated>2014-04-03T18:22:00+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/engineering/verilog-importing-envvar</id>
    <content type="html"><![CDATA[<p>Based on a <a href="http://stackoverflow.com/a/15103561/97073">Stackoverflow answer</a>, to import environment variables into Verilog you can use:</p>

<pre><code>import "DPI-C" function string getenv(input string env_name);

module top;
  initial begin
    $write("env = %s\n", {getenv("HOME"), "/FileName"});
  end
endmodule
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Matlab: Leading 0's]]></title>
    <link href="http://lizard-spock.co.uk/blog/engineering/matlab-leading-0-s/"/>
    <updated>2014-03-25T20:52:35+00:00</updated>
    <id>http://lizard-spock.co.uk/blog/engineering/matlab-leading-0-s</id>
    <content type="html"><![CDATA[<p>For adding leading zeros to a number the following can be used for 4 decimal places with integer input:</p>

<pre><code>dat = 1;
sprintf(['%4.4d'], dat)
</code></pre>

<p>To make this programmable the following can be used:</p>

<pre><code>dat       = 1;
min_width = 4;
sprintf(['%',num2str(min_width),'.', num2str(min_width),'d'], 1)
</code></pre>

<p>For string inputs you need:</p>

<pre><code>dat       = '1'
min_width = 4;
sprintf(['%0',num2str(6),'s'], dat)
</code></pre>
]]></content>
  </entry>
  
</feed>
