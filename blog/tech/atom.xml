<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tech | RockPaperScissors]]></title>
  <link href="http://lizard-spock.co.uk/blog/tech/atom.xml" rel="self"/>
  <link href="http://lizard-spock.co.uk/"/>
  <updated>2014-06-19T20:12:51+01:00</updated>
  <id>http://lizard-spock.co.uk/</id>
  <author>
    <name><![CDATA[Morgan Prior]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Shell Redirection]]></title>
    <link href="http://lizard-spock.co.uk/blog/tech/shell-redirection/"/>
    <updated>2014-06-19T20:10:57+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/tech/shell-redirection</id>
    <content type="html"><![CDATA[<p>To redirect stdout and stderr in bash we use:</p>

<pre><code>./ShellFile.sh &amp;&gt; test.log
</code></pre>

<p>However in tcsh that results in:</p>

<pre><code>Invalid null command.
</code></pre>

<p>Switch the order of <code>&amp;</code> and <code>&gt;</code> in tcsh :</p>

<pre><code>./ShellFile.sh &gt;&amp; test.log
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress Categories with Different Styles]]></title>
    <link href="http://lizard-spock.co.uk/blog/tech/octopress-categories-with-different-styles/"/>
    <updated>2014-06-14T08:24:01+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/tech/octopress-categories-with-different-styles</id>
    <content type="html"><![CDATA[<p>As I use the code blocks for ingredient lists on my recipe pages I wanted to
have a different style, lighter background instead of black.</p>

<p>I currently manually set a different layout in the _post header:</p>

<pre><code>layout: post
categories: 
- Tech

layout: recipe
categories: 
- Cooking
</code></pre>

<!-- more -->


<p>The layout will then look for a matching layout in <code>source/_layouts</code></p>

<p>Manually create your new layout (instructions from top level Octopress site):</p>

<pre><code>cp source/_layouts/post.html source/_layouts/recipe.html
</code></pre>

<p>Edit <code>source/_layouts/recipe.html</code> changing the role to <code>recipe</code>:</p>

<pre><code>---
layout: default
single: true
---

&lt;div&gt;
&lt;article class="hentry" role="recipe"&gt;
  \{\% include article.html \%\}
  &lt;footer&gt;
    &lt;p class="meta"&gt;
</code></pre>

<p>This will now pick up the styling that <code>post</code> also gets but we can target our modifications to <code>article[role="recipe"]</code>.
For custom stylings apply changes in to the relevant file in <code>sass/custom/</code>.</p>

<p>To modify the background colour of a code block<br/>
<code>sass/custom/_styles.scss</code> add:</p>

<pre><code>// Customise the recipe layout
article[role="recipe"] pre {
  background-color: $sidebar-bg;
}
</code></pre>

<p>NB: <code>$sidebar-bg</code> is defined in <code>sass/base/_theme.scss</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Licence Types and Short Identifiers]]></title>
    <link href="http://lizard-spock.co.uk/blog/tech/licence-types-and-short-identifiers/"/>
    <updated>2014-05-05T20:17:43+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/tech/licence-types-and-short-identifiers</id>
    <content type="html"><![CDATA[<p>Some time ago <a href="http://guides.rubygems.org/specification-reference/">gemspec</a> files for ruby gems added the ability to
specify the short identifier for the license type.</p>

<pre><code>Gem::Specification.new do |s|
  s.licenses    = ['MIT']
end
</code></pre>

<p>The unofficial list of short identifiers is available from <a href="https://spdx.org/licenses/">spdx</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Methods and Splat]]></title>
    <link href="http://lizard-spock.co.uk/blog/tech/ruby-methods-and-splat/"/>
    <updated>2014-04-09T19:47:47+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/tech/ruby-methods-and-splat</id>
    <content type="html"><![CDATA[<p>Ruby methods can set default values for optional arguments:</p>

<pre><code>def commit(path=Dir.pwd)
</code></pre>

<p>To take an optional number of arguments a splat can be used:</p>

<pre><code>def amethod( *arg1 )
</code></pre>

<p>The Problem is now to set defaults or require a set number of arguments.</p>

<ol>
<li>Splat arguments can not be defaulted.</li>
<li>The splat can accept zero arguments.</li>
</ol>


<p>The following might be what you would expect for a default in a splat, but this conflicts with its abilliy to accept 0 arguments.</p>

<pre><code>def commit(*path=[Dir.pwd]) ##THIS DOES NOT WORK
</code></pre>

<p>Splats can follow other arguments. To require at least one argument:</p>

<pre><code>def add(files, *files_splat)
</code></pre>

<p>No arguments required but the first has a default:</p>

<pre><code>def commit(path=Dir.pwd, *path_splat)
</code></pre>

<p>These also work as expected in Thor for parsing command line options. I have used them in my <a href="https://github.com/morganp/dssx">dssx</a> gem.</p>

<p>In thor I also add this to the start of my methods to combine <code>path</code> and <code>path_splat</code> which are strings:</p>

<pre><code>path_list = path + ' ' + path_splat * ' '
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thor Adding --verbose]]></title>
    <link href="http://lizard-spock.co.uk/blog/tech/thor-adding-verbose/"/>
    <updated>2014-04-09T19:26:44+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/tech/thor-adding-verbose</id>
    <content type="html"><![CDATA[<p>With a command line Ruby application using Thor for the option parsing I want to be able to run:</p>

<pre><code>$ thor_app --version
&gt; thor_app version 1.0.0
</code></pre>

<p>Create a boolean class option, which does not belong to a task, that can be referenced by other tasks. The often used example for a class option is -v verbose, as all tasks can use this to determine how noisy they should be.</p>

<p>Then create a &lsquo;version&rsquo; task and make it the default task, so when no task is defined the version task is ran and can react to the &mdash;version flag (class option).</p>

<pre><code>class CLI &lt; Thor
  #include Thor::Actions
  class_option :version, :type =&gt; :boolean

  desc "version", "Show thor_app version"
  def version
    if options[:version]
      puts "thor_app version #{find_version}"
    end
  end
  default_task :version

  no_tasks do
    def find_version
      ## Method can be replaced to look up VERSION
      '1.0.0'
    end
  end
end
</code></pre>

<p>This is based on <a href="http://stackoverflow.com/q/22809972/97073">my SO Question</a>.</p>
]]></content>
  </entry>
  
</feed>
