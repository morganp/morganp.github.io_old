<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tech | RockPaperScissors]]></title>
  <link href="http://morganp.github.io/blog/tech/atom.xml" rel="self"/>
  <link href="http://morganp.github.io/"/>
  <updated>2014-02-11T21:28:46+00:00</updated>
  <id>http://morganp.github.io/</id>
  <author>
    <name><![CDATA[Morgan Prior]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Brew Update Fail]]></title>
    <link href="http://morganp.github.io/blog/tech/brew-update-fail/"/>
    <updated>2014-02-11T21:17:24+00:00</updated>
    <id>http://morganp.github.io/blog/tech/brew-update-fail</id>
    <content type="html"><![CDATA[<p>Received the following errors when doing <code>brew update</code> on mountain lion:</p>

<pre><code>error: The following untracked working tree files would be overwritten by merge:
        Library/Formula/platypus.rb
Please move or remove them before you can merge.
Aborting
Error: Failure while executing: git pull -q origin refs/heads/master:refs/remotes/origin/master
</code></pre>

<p>A solution found on <a href="http://stackoverflow.com/questions/10762859/brew-update-the-following-untracked-working-tree-files-would-be-overwritten-by">Stackoverflow</a></p>

<pre><code>cd /usr/local
git fetch origin
git reset --hard origin/master
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reverting in Git]]></title>
    <link href="http://morganp.github.io/blog/tech/reverting-in-git/"/>
    <updated>2014-01-08T20:10:31+00:00</updated>
    <id>http://morganp.github.io/blog/tech/Reverting-in-git</id>
    <content type="html"><![CDATA[<p>I use to use <code>svn revert</code> to roll back local modification and get back to the state I was in last time I checked out.</p>

<p>to do the same in git  I use :</p>

<pre><code>git checkout -- filename
</code></pre>

<p>As git does not automatically push to a server the way subversion does you have an opportunity to revert local commits.</p>

<pre><code>git reset --soft HEAD^
</code></pre>

<p>Here the <code>^</code> means previous. ie go back 1 commit. Using soft the files will still appear modified and we can use the previous command to reset the files as required.</p>

<p>Further reading <a href="http://stackoverflow.com/q/2530060/97073">what “git reset” does in plain english?</a>, <a href="http://marklodato.github.io/visual-git-guide/index-en.html">Visual Git Reference</a> and <a href="http://git-scm.com/blog/2011/07/11/reset.html">Reset Demystified</a></p>

<p>&mdash;
<a href="http://www.norbauer.com/rails-consulting/notes/git-revert-reset-a-single-file.html">git checkout source</a>.  <br/>
<a href="http://stackoverflow.com/questions/2845731/how-to-uncommit-my-last-commit-in-git">git reset source</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rtorrent Move on Download Completion]]></title>
    <link href="http://morganp.github.io/blog/tech/rtorrent-move-on-download-completion/"/>
    <updated>2014-01-08T19:53:02+00:00</updated>
    <id>http://morganp.github.io/blog/tech/rtorrent-move-on-download-completion</id>
    <content type="html"><![CDATA[<p>rtorrent moving torrents upon completion:</p>

<pre><code># Torrents go in ~/Torrents
# Incomplete Downloads in ~/Incomplete
# Upon Completion Data is moved to ~/Seeding

schedule = watch_directory_standard,10,10,"load_start=~/Torrents/*.torrent,d.set_directory=~/Incomplete/,d.set_custom1=~/Seeding/

#Move upon download completion.
system.method.set_key =event.download.finished,move_complete,"d.set_directory=$d.get_custom1= ;execute=mv,-n,$d.get_base_path=,$d.get_custom1="
</code></pre>

<p><a href="https://gist.github.com/morganp/8323448">Link to gist on github</a>.</p>

<p><a href="http://libtorrent.rakshasa.no/wiki/RTorrentCommonTasks#Movecompletedtorrentstodifferentdirectorydependingonwatchdirectory">Recipe</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Check You Current Vim Colorscheme]]></title>
    <link href="http://morganp.github.io/blog/tech/check-you-current-vim-colorscheme/"/>
    <updated>2013-12-20T19:43:16+00:00</updated>
    <id>http://morganp.github.io/blog/tech/Check-you-current-Vim-colorscheme</id>
    <content type="html"><![CDATA[<p>This is not a foolproof method, as vim colorschemes are juct vim commands but by default they set:</p>

<pre><code>let g:colors_name = "ir_black"
</code></pre>

<p>so to find out from vim just run</p>

<pre><code>:echo g:colors_name
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cshrc Alias Loop]]></title>
    <link href="http://morganp.github.io/blog/tech/cshrc-alias-loop/"/>
    <updated>2013-12-19T22:04:45+00:00</updated>
    <id>http://morganp.github.io/blog/tech/Cshrc-alias-loop</id>
    <content type="html"><![CDATA[<p>Here are some aliased commands which stop line wrapping on really long lines, making the output much more readable:</p>

<pre><code># Stop line wrapping
alias ll '(tput rmam; ls -lFh  \!*; tput smam)'
alias la '(tput rmam; ls -lAFh \!*; tput smam)'

alias tree '(tput rmam; tree \!*; tput smam)'
</code></pre>

<p>In use:</p>

<pre><code>$ tree
Alias loop
</code></pre>

<p>The trick is to pre-pend &ldquo;&rdquo; to the command</p>

<pre><code>alias tree '(tput rmam; ""tree \!*; tput smam)'
</code></pre>

<p><a href="http://docstore.mik.ua/orelly/unix/upt/ch10_06.htm">source</a></p>
]]></content>
  </entry>
  
</feed>
