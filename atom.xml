<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[RockPaperScissors]]></title>
  <link href="http://lizard-spock.co.uk/atom.xml" rel="self"/>
  <link href="http://lizard-spock.co.uk/"/>
  <updated>2015-06-10T20:26:08+01:00</updated>
  <id>http://lizard-spock.co.uk/</id>
  <author>
    <name><![CDATA[Morgan Prior]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Matlab: Linear Progressions]]></title>
    <link href="http://lizard-spock.co.uk/blog/engineering/matlab-linear-progressions/"/>
    <updated>2015-06-10T20:19:05+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/engineering/matlab-linear-progressions</id>
    <content type="html"><![CDATA[<p>Progressions can be created using the <a href="http://uk.mathworks.com/help/matlab/ref/colon.html">Colon</a> operator</p>

<pre><code>min   = 10
max   = 100
steps = 20

step_size = (max-min)/steps

i = min:step_size:max
</code></pre>

<p>Alternatively <a href="http://uk.mathworks.com/help/matlab/ref/linspace.html">linspace</a> can be used:</p>

<pre><code>min   = 10
max   = 100
steps = 20

i = linspace(min,max,steps)
</code></pre>

<p>This also allows for easily switching to a log scale using <a href="http://uk.mathworks.com/help/matlab/ref/logspace.html">logspace</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Matlab: Functions Inputs Parsed Based on Outputs]]></title>
    <link href="http://lizard-spock.co.uk/blog/engineering/matlab-functions-inputs-parsed-based-on-outputs/"/>
    <updated>2015-06-10T20:10:54+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/engineering/matlab-functions-inputs-parsed-based-on-outputs</id>
    <content type="html"><![CDATA[<p>It is quite common to detect how many input arguments have been passed to a function, using <code>nargin</code> (N arguments in).  Commonly used to set defaults for arguments not specified.</p>

<pre><code>function result = fun_name(a,b,c);
  if nargin &lt;1
    error('a must be supplied');
  end
  if nargin &lt;2
    b = 1; 
  end
  if nargin &lt;3
    c = 1;
  end

  % ...
</code></pre>

<p>However I just discovered <code>nargout</code> (N arguments out(.</p>

<p>This allows the scripts to differentiate between:</p>

<pre><code>x     = fun(a)
[x,y] = fun(a)
</code></pre>

<p>Example 1:</p>

<pre><code>function [ varargout ] = nargout_test( input_args )
  disp(['nargout : ', num2str(nargout)])

  % Set outputs
  for i=1:nargout
    varargout{i} = 0;
  end
end
</code></pre>

<p>Example 2, changing input args usage based on number of outputs:
note the input keyword change to the input arguments <code>varargin</code> Variable argument in.</p>

<pre><code>function [ varargout ] = nargout_test( varargin )
  disp(['nargin : ', num2str(nargin)])
  disp(['nargout : ', num2str(nargout)])

  if nargout &gt; 2
    error('Too many output arguments')
  end

  if nargout == 1
    % single output first input means something
    varargout{1} = varargin{1};
  end

  if nargout == 2
    % two outputs first input means some thing else
    varargout{1} = varargin{1} / varargin{2};
    varargout{2} = varargin{1} * varargin{2};
  end

end
</code></pre>

<p>A good example is the <a href="http://uk.mathworks.com/matlabcentral/fileexchange/13792-the-dc-blocking-filter/">dcblock script by J M De Freitas</a>.</p>

<p>Which has this syntax:</p>

<pre><code>% SYNTAX    [a] = dcblock(Fc);  
%           [a] = dcblock(fc,fs);  
%           [aQ] = dcblock(fc,fs,B);  
%           [Fc,fc] = dcblock(a,fs);  
%           dcblock(Fc)  
%           dcblock(fc,fs)  
%           dcblock(fc,fs,B)  
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SystemVerilog: RTL Types]]></title>
    <link href="http://lizard-spock.co.uk/blog/engineering/systemverilog-rtl-types/"/>
    <updated>2015-03-26T20:08:34+00:00</updated>
    <id>http://lizard-spock.co.uk/blog/engineering/systemverilog-rtl-types</id>
    <content type="html"><![CDATA[<p><code>reg</code> and <code>wire</code> were the original synthesisable types. Wires are constantly assigned and regs are evaluated at particular points, the advantage here is for the simulator to make optimisations.</p>

<pre><code>wire w_data;
assign w_data = y;

// Same function as above using reg
reg r_data;
always @* 
  r_data = y ;
</code></pre>

<p>A common mistake when learning Verilog is to assume the reg type implies a register in hardware. The earlier optimisation for the simulator can be done through the context of its usage.</p>

<p>This introduces <code>logic</code> which can be used in place of wire and reg.</p>

<pre><code>logic  w_data;
assign w_data = y;

// Same function as above using reg
logic r_data;
always @* 
  r_data = y ;
</code></pre>

<p>The type <code>bit</code> and <code>byte</code> have also been created that can only hold 2 states 0 or 1 no x or z. <code>byte</code> implies <code>bit [7:0]</code>. Using these types offers a small speed improvement but I would recommend not using them in RTL as your verification may miss uninitialized values or critical resets.</p>

<p>The usage of <code>bit</code> and <code>byte</code> would be more common in testbench components, but can lead to issues in case of having to drive x&rsquo;s to stimulate data corruption and recovery.</p>

<hr />

<p><strong>Update</strong></p>

<p>At the time of writing I was under the impression that <code>logic</code> could not be used for tristate, I am unable to find the original paper that I based this on. Until further updates, comments or edits, I revoke my assertion that <em>logic can not be used to create tri-state lines</em>.</p>

<hr />

<p>The <code>tri</code> type has been added, for explicitly defining a tri-state line. It is based on the properties of a <code>wire</code>, <code>logic</code> is based on the properties of a <code>reg</code>.</p>

<pre><code>tri t_data;
assign t_data = (drive) ? y : 1'bz ;
</code></pre>

<p>If you no longer have to support backwards compatibility Verilog then I would recommend switching to using <code>logic</code> and <code>tri</code>. Using <code>logic</code> aids re-factoring and and <code>tri</code>  reflects the design intent of a tristate line.</p>

<p>Originally posted as a<a href="http://stackoverflow.com/a/13285242/97073"> SO answer</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Verilog: Define if Not Defined]]></title>
    <link href="http://lizard-spock.co.uk/blog/engineering/verilog-define-if-not-defined/"/>
    <updated>2015-03-26T19:45:10+00:00</updated>
    <id>http://lizard-spock.co.uk/blog/engineering/verilog-define-if-not-defined</id>
    <content type="html"><![CDATA[<p>To set a default define option while allowing it to be overridden from the command line.</p>

<pre><code>`ifndef mode_sel
  `define mode_sel 0
`endif
</code></pre>

<p>The command line should override testbench defined options but this has proven unreliable.</p>

<p>command line to set value:</p>

<pre><code>irun -define mode_sel=1 ...
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Verilog: Shm Waveforms]]></title>
    <link href="http://lizard-spock.co.uk/blog/engineering/verilog-shm-waveforms/"/>
    <updated>2015-03-26T19:38:29+00:00</updated>
    <id>http://lizard-spock.co.uk/blog/engineering/verilog-shm-waveforms</id>
    <content type="html"><![CDATA[<p>The best practice is to use a tcl file:</p>

<p>shm.tcl</p>

<pre><code>database -open waves -shm
probe -create your_top_level -depth all -all -shm -database waves
run 
exit
</code></pre>

<p>run with :</p>

<pre><code>irun -access +r testcase.sv -input shm.tcl
</code></pre>

<p>Alternatively the following can be added to the simulation:</p>

<pre><code>initial begin
  $shm_open("waves.shm"); $shm_probe("AS");
end
</code></pre>

<p>run with <code>irun -access +r testcase.sv</code></p>

<p>NB: I have had trouble getting this last version to work, the tcl file method is more reliable.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Verilog Timeformat]]></title>
    <link href="http://lizard-spock.co.uk/blog/engineering/verilog-timeformat/"/>
    <updated>2015-03-26T19:21:25+00:00</updated>
    <id>http://lizard-spock.co.uk/blog/engineering/verilog-timeformat</id>
    <content type="html"><![CDATA[<p>Time can be displayed during simulation using <code>%t</code>.</p>

<pre><code>$display("%t", $realtime);
</code></pre>

<p>Timeformat is used to control the way (<code>%t</code>) this is displayed:</p>

<pre><code>//$timeformat(unit#, prec#, "unit", minwidth);
$timeformat(-3, 2, " ms", 10); // -3 and " ms" give useful display msg
</code></pre>

<ol>
<li>unit is the base that time is to be displayed in, from 0 to -15</li>
<li>precision is the number of decimal points to display.</li>
<li>&ldquo;unit&rdquo; is a string appended to the time, such as &ldquo; ns&rdquo;.</li>
<li><p>minwidth is the minimum number of characters that will be displayed.</p>

<p>   0 = 1 sec
  -1 = 100 ms
  -2 = 10 ms
  -3 = 1 ms
  -4 = 100 us
  -5 = 10 us
  -6 = 1 us
  -7 = 100 ns
  -8 = 10 ns
  -9 = 1 ns
 -10 = 100 ps
 -11 = 10 ps
 -12 = 1 ps
 -13 = 100 fs
 -14 = 10 fs
 -15 = 1 fs</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tiered Raised Bed]]></title>
    <link href="http://lizard-spock.co.uk/blog/garden/tiered-raised-bed/"/>
    <updated>2015-03-24T19:17:45+00:00</updated>
    <id>http://lizard-spock.co.uk/blog/garden/tiered-raised-bed</id>
    <content type="html"><![CDATA[<p>Decorative raised bed for lavender:
<img src="http://lizard-spock.co.uk/images/Gardening/morganp-20141012-RaisedBed-IMG_9605.jpg" alt="" />
<img src="http://lizard-spock.co.uk/images/Gardening/morganp-20141012-RaisedBed-IMG_9607.jpg" alt="" /></p>

<p>A couple of images before it was filled:
<img src="http://lizard-spock.co.uk/images/Gardening/morganp-20140708-RaisedBed-_MG_9173.jpg" alt="" />
<img src="http://lizard-spock.co.uk/images/Gardening/morganp-20140708-RaisedBed-_MG_9175.jpg" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS X Disable Back Gesture]]></title>
    <link href="http://lizard-spock.co.uk/blog/tech/os-x-disable-back-gesture/"/>
    <updated>2015-02-18T18:26:07+00:00</updated>
    <id>http://lizard-spock.co.uk/blog/tech/os-x-disable-back-gesture</id>
    <content type="html"><![CDATA[<p>After accidentally scrolling back a page when browsing the web in chrome too many times. Figured out how to disable it: from your terminal</p>

<pre><code>defaults write com.google.Chrome AppleEnableSwipeNavigateWithScrolls -bool FALSE
</code></pre>

<p><a href="http://apple.stackexchange.com/questions/21236/how-do-i-disable-chromes-two-finger-back-forward-navigation">From
http://apple.stackexchange.com</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SystemVerilog: Constrained Random]]></title>
    <link href="http://lizard-spock.co.uk/blog/engineering/systemverilog-constrained-random/"/>
    <updated>2015-02-18T17:01:56+00:00</updated>
    <id>http://lizard-spock.co.uk/blog/engineering/systemverilog-constrained-random</id>
    <content type="html"><![CDATA[<p>A minimal example of constrained random to constraining a 4 bit value to 0 to 11 when randomised.</p>

<pre><code>module tb;

  class cr_example_t
    rand bit val;
    rand bit [3:0] sel;

    constrain c1 {
      sel &lt; 12;
    }
  endclass

  cr_example_t cr_example = new;

  initial begin :test_program
    cr_example.randomise();
    $display(cr_example.val);
    $display(cr_example.sel);

    $finish;
  end

endmodule
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Verilog: Thermometer Code]]></title>
    <link href="http://lizard-spock.co.uk/blog/engineering/verilog-thermometer-code/"/>
    <updated>2015-02-18T16:51:43+00:00</updated>
    <id>http://lizard-spock.co.uk/blog/engineering/verilog-thermometer-code</id>
    <content type="html"><![CDATA[<p>Efficiently create a <a href="http://en.wikipedia.org/wiki/Unary_coding">thermometer code</a> in verilog:</p>

<pre><code>localparam M = 32;

function [M-1:0] therm_code;
  input    [$clog2(M):0] val;
  begin
    for (int i = 0; i&lt;M; i++) begin
      therm_code[i] = (i&lt;val);
    end
  end
endfunction
</code></pre>

<p>Other methods which do not synthesis as well:</p>

<pre><code>therm_code  = (2**val) - 1;

therm_code = ~({M{1'b1}} &lt;&lt; val);
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim: Macro]]></title>
    <link href="http://lizard-spock.co.uk/blog/tech/vim-macro/"/>
    <updated>2015-02-18T16:41:40+00:00</updated>
    <id>http://lizard-spock.co.uk/blog/tech/vim-macro</id>
    <content type="html"><![CDATA[<p>When <code>.</code> just will not do (repeats last action) because you need to capture  a movement as well, macros are quick to create and use.</p>

<pre><code>q&lt;number&gt;&lt;actions&gt;q
</code></pre>

<p>Replay macro</p>

<pre><code>@&lt;number&gt; 
</code></pre>

<p>Replay macro 10 times</p>

<pre><code>10@&lt;number&gt;
</code></pre>

<p>Example
Yank and put line, then repeat 10 times.</p>

<pre><code>q1 yyP q

10@1
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Find Your Ruby Gems Path]]></title>
    <link href="http://lizard-spock.co.uk/blog/tech/find-your-ruby-gems-path/"/>
    <updated>2015-02-18T16:39:32+00:00</updated>
    <id>http://lizard-spock.co.uk/blog/tech/find-your-ruby-gems-path</id>
    <content type="html"><![CDATA[<pre><code> ruby -r rubygems -e "p Gem.path"
</code></pre>

<p>From <a href="http://gilesbowkett.blogspot.co.uk/2009/06/find-your-ruby-gems-path.html">Giles Bowkett</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bread: Doves Gluten Free]]></title>
    <link href="http://lizard-spock.co.uk/blog/cooking/bread-doves-gluten-free/"/>
    <updated>2014-12-21T20:12:44+00:00</updated>
    <id>http://lizard-spock.co.uk/blog/cooking/bread-doves-gluten-free</id>
    <content type="html"><![CDATA[<p>For use with the Panasonic Bread Maker SD-2501 &amp; SD-2500.<br/>
<strong><a href="http://www.lakeland.co.uk/content/documents/Panasonic_Bread_Maker_Instructions_15352.pdf">Online Manual</a>.</strong></p>

<p>Gluten Recipes can not use timer function.</p>

<p>For best results follow this order of ingredients: <br/>
water, salt, fat, gluten free bread mix.</p>

<h2>Doves Farm Gluten Free (Panasonic recipe)</h2>

<p> SD-2501 Menu 12<br/>
 SD-2500 Menu 11</p>

<p> Dark Crust (1hr 55min)</p>

<pre><code>Water              320ml (330ml for Brown flour)
Cider Vinegar      1 teaspoon
Salt               1 teaspoon
Vegtable Oil       4 tablespoon
Medium Egg         1
Medium Egg White   1
Sugar              1 tablespoon
Flour              450g
Yeast              2 teaspoon
</code></pre>

<h2><a href="http://www.dovesfarm.co.uk/recipes/gluten-free-white-bread-for-bread-machines">Doves farm recommends these ingredients</a>:</h2>

<p> SD-2501 Menu 12<br/>
 SD-2500 Menu 11</p>

<p> Dark Crust (1hr 55min)</p>

<pre><code>         Medium        Large
Milk     310g          465g
Vinegar  1 teaspoon    1.5 teaspoon
Oil      6 tablespoon  9   tablespoon
Eggs     2             3
Flour    450g          675g
Salt     1 teaspoon    1.5 teaspoon
Sugar    2 tablespoon  3   tablespoon
Yeast    2 teaspoon    3   teaspoon
</code></pre>

<ol>
<li>Mix milk, vinegar, oil and eggs. Pour into the bread machine.</li>
<li>Add flour, salt and sugar, stir.</li>
<li>Sprinkle Yeast on top</li>
<li>Start machine, pausing after a few minutes to scrape down the sides.</li>
<li>Resume programme until completion</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Verilog: Calculate Primes]]></title>
    <link href="http://lizard-spock.co.uk/blog/engineering/verilog-calculate-primes/"/>
    <updated>2014-12-20T07:28:41+00:00</updated>
    <id>http://lizard-spock.co.uk/blog/engineering/verilog-calculate-primes</id>
    <content type="html"><![CDATA[<p>Based on my answer to <a href="http://stackoverflow.com/q/27461173/97073">this SO Question</a>.</p>

<p><strong><a href="http://www.mathsisfun.com/definitions/prime-number.html">Definition of Prime</a>:</strong></p>

<blockquote><p>A Prime Number can be divided evenly only by 1, or itself.
And it must be a whole number greater than 1.</p></blockquote>

<p>A simple method would be to iterate over numbers 2 to N, checking if it was divisible by all natural numbers greater than 2, and below the current value.</p>

<p>Once checked that it is not divisible by 2 there is not point checking for 4, 6, 8 etc.
Remembering the definition of prime all numbers that are not prime are integer multiples of prime. so we have reduced the amount of work involved in testing primality.</p>

<pre><code>parameter        N        = 1000;          
reg       [31:0] prime_number [0:N-1]; Store 0 to N prime numbers
integer          test     ; // Result of primality test
integer          k        ; // Currently looking for k'th prime 
integer          index    ; // Counts 1 to k, indexing previous primes 
integer          number_ut; // Number Under test

reg        [1:0] state   ; 
localparam       S_INC   = 2'b01;
localparam       S_CHECK = 2'b10;

initial begin
  prime_number[0] = 'd2; //Preload first Prime
  state           = S_CHECK; //Check set count first
  number_ut       = 'd3; // Number Under Test
  k               = 'd1; // Position 0 preloaded
  index           = 'd0;
  test            = 'd1;
end

always @(posedge clk ) begin
  if (state == S_INC) begin
    number_ut &lt;= number_ut+1 ;
    state     &lt;= S_CHECK ;
    index     &lt;= 'd0;
    test      &lt;= 'd1; // Safe default
  end
  else if (state == S_CHECK) begin
    if (test == 0) begin
      // Failed Prime test (exact divisor found)
      $display("Reject %3d", number_ut);
      state           &lt;= S_INC ;
    end
    else if (index == k) begin
      //Passed Prime check
      //Use k+1 so that 2 is number 1, 3 is 2nd etc
      $display("Found the %1d th Prime, it is %1d", k+1, number_ut);
      prime_number[k] &lt;= number_ut;
      k               &lt;= k + 1;
      state           &lt;= S_INC ;
    end
    else begin
      test  &lt;= number_ut % prime_number[index] ;
      index &lt;= index + 1;          
    end
  end
end
</code></pre>

<p><a href="http://www.edaplayground.com/x/BzX">Example on EDA Playground</a>.</p>

<p>This is however just a programming exercise as the resulting hardware is likely substantially bigger than just implementing a look up table to the maxim number of primes you can fit in <code>prime_number</code>. The look up table will also be ready from time zero and not need to recompute every time you power up.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tcsh Remove Trailing /]]></title>
    <link href="http://lizard-spock.co.uk/blog/tech/tcsh-remove-trailing-slash/"/>
    <updated>2014-10-08T21:15:43+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/tech/tcsh-remove-trailing-slash</id>
    <content type="html"><![CDATA[<pre><code>#!/bin/tcsh

set var = "helloworld/"

## http://dbaspot.com/shell/350417-sed-removing-trailing.html
set var = `echo "$var" | sed -e 's,\(.\)/$,\1,'`

echo $var
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[F-Stop Loka &amp; Tripod]]></title>
    <link href="http://lizard-spock.co.uk/blog/photography/f-stop-loka-and-tripod/"/>
    <updated>2014-09-18T11:28:47+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/photography/f-stop-loka-and-tripod</id>
    <content type="html"><![CDATA[<p>F-stop Loka with side mounted Manfrotto 055XPROB (3 stage carbon), with a Manfrotto 488 rc2 head.</p>

<p><img class="centre" src="http://lizard-spock.co.uk/images/Photography/Loka/morganp-20140416-Loka-_MG_7445.jpg">
<img class="centre" src="http://lizard-spock.co.uk/images/Photography/Loka/morganp-20140416-Loka-_MG_7449.jpg"></p>

<p>Tripod relatively secure in this position, although if not tightly strapped down movement does loosen the straps.</p>

<p>NB: also a thinktank skin 50 mounted on the hip belt.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Word WORD the Difference]]></title>
    <link href="http://lizard-spock.co.uk/blog/tech/word-word-the-difference/"/>
    <updated>2014-08-19T06:27:30+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/tech/word-word-the-difference</id>
    <content type="html"><![CDATA[<p>Just realised there is a difference between word and WORD in Vim.</p>

<p>WORD is non-blank delimited by whitespace.
word is alpha-numeric and other non-blank characters delimited by whitespace and punctuation. &lsquo;iskeyword&rsquo; can be used to move delimiters in to part of the selection of the word.</p>

<p>by default :</p>

<pre><code>this-is-four-words
this-is-one-WORD
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[List Files Ignored by Git]]></title>
    <link href="http://lizard-spock.co.uk/blog/tech/list-files-ignored-by-git/"/>
    <updated>2014-07-30T20:18:07+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/tech/list-files-ignored-by-git</id>
    <content type="html"><![CDATA[<p><a href="https://www.youtube.com/watch?v=4VBG9FlyiOw">From Github Training &amp; Guides</a>.</p>

<pre><code>git ls-files --others --ignored --exclude-standard
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xkill]]></title>
    <link href="http://lizard-spock.co.uk/blog/tech/xkill/"/>
    <updated>2014-07-30T20:16:39+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/tech/xkill</id>
    <content type="html"><![CDATA[<p>I just discovered the <code>xkill</code> command, when a window has crashed you
can call xkill and get a skull and crossbones cursor to kill the application.</p>

<p>It even works well with remote GUI applications (Sun Grid Engine SGE).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Submit to SGE as if Working Locally]]></title>
    <link href="http://lizard-spock.co.uk/blog/engineering/submit-to-sge-as-if-working-locally/"/>
    <updated>2014-07-30T20:13:23+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/engineering/submit-to-sge-as-if-working-locally</id>
    <content type="html"><![CDATA[<p>Setting an alias in you .tcshrc</p>

<pre><code>alias qrun 'qrsh -V -noshell -cwd !*'
</code></pre>

<p>or bash</p>

<pre><code>alias qrun='qrsh -V -noshell -cwd !*'
</code></pre>

<p>Which makes submitting any script to the grid just:</p>

<pre><code>qrun helloworld.sh
</code></pre>

<p>Originally asked on <a href="http://superuser.com/a/751162/42141">superuser</a>.</p>
]]></content>
  </entry>
  
</feed>
