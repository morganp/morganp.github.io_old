<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[RockPaperScissors]]></title>
  <link href="http://lizard-spock.co.uk/atom.xml" rel="self"/>
  <link href="http://lizard-spock.co.uk/"/>
  <updated>2014-04-09T20:02:29+01:00</updated>
  <id>http://lizard-spock.co.uk/</id>
  <author>
    <name><![CDATA[Morgan Prior]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby Methods and Splat]]></title>
    <link href="http://lizard-spock.co.uk/blog/tech/ruby-methods-and-splat/"/>
    <updated>2014-04-09T19:47:47+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/tech/ruby-methods-and-splat</id>
    <content type="html"><![CDATA[<p>Ruby methods can set default values for optional arguments:</p>

<pre><code>def commit(path=Dir.pwd)
</code></pre>

<p>To take an optional number of arguments a splat can be used:</p>

<pre><code> def amethod( *arg1 )
</code></pre>

<p>The Problem is now to set defaults or require a set number of arguments.</p>

<ol>
<li>Splat arguments can not be defaulted.</li>
<li><p>The splat can accept zero arguments</p>

<p> def commit(*path=[Dir.pwd]) ##THIS DOES NOT WORK</p></li>
</ol>


<p>Splats can follow other arguments. To require at least one argument:</p>

<pre><code>def add(files, *files_splat)
</code></pre>

<p>No arguments required but the first has a default:</p>

<pre><code>def commit(path=Dir.pwd, *path_splat)
</code></pre>

<p>These also work as expected in Thor for parsing command line options. I have used them in my <a href="https://github.com/morganp/dssx">dssx</a> gem.</p>

<p>In thor I also add this to the start of my methods to combine <code>path</code> and <code>path_splat</code> which are strings:</p>

<pre><code>path_list = path + ' ' + path_splat * ' '
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thor Adding --verbose]]></title>
    <link href="http://lizard-spock.co.uk/blog/tech/thor-adding-verbose/"/>
    <updated>2014-04-09T19:26:44+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/tech/thor-adding-verbose</id>
    <content type="html"><![CDATA[<p>With a command line Ruby application using Thor for the option parsing I want to be able to run:</p>

<pre><code>$ thor_app --version
&gt; thor_app version 1.0.0
</code></pre>

<p>Create a boolean class option, which does not belong to a task, that can be referenced by other tasks. The often used example for a class option is -v verbose, as all tasks can use this to determine how noisy they should be.</p>

<p>Then create a &lsquo;version&rsquo; task and make it the default task, so when no task is defined the version task is ran and can react to the &mdash;version flag (class option).</p>

<pre><code>class CLI &lt; Thor
  #include Thor::Actions
  class_option :version, :type =&gt; :boolean

  desc "version", "Show thor_app version"
  def version
    if options[:version]
      puts "thor_app version #{find_version}"
    end
  end
  default_task :version

  no_tasks do
    def find_version
      ## Method can be replaced to look up VERSION
      '1.0.0'
    end
  end
end
</code></pre>

<p>This is based on <a href="http://stackoverflow.com/q/22809972/97073">my SO Question</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating Lightroom Metadata Views]]></title>
    <link href="http://lizard-spock.co.uk/blog/tech/photography/creating-lightroom-metadata-views/"/>
    <updated>2014-04-09T01:28:27+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/tech/photography/creating-lightroom-metadata-views</id>
    <content type="html"><![CDATA[<p>Lightroom plugins for metadata views are called metadata tag sets and only require 2 text files.</p>

<p>create a folder called <code>something.lrdevplugin</code> once you are happy with it it can be renamed <code>something.lrplugin</code></p>

<p>Create a file called Info.lua and Tagset.lua</p>

<p>Info.lua:</p>

<pre><code>return {
  LrSdkVersion = 5.0,
  LrSdkMinimumVersion = 5.0,
  LrToolkitIdentifier = ’sample.metadata',
  LrPluginName = LOC "$$$/CustomMetadata/PluginName=Example View",
  LrMetadataTagsetFactory = ‘Tagset.lua',
}
</code></pre>

<p>Tagset.lua</p>

<pre><code>return {
  title = LOC "$$$/SampleTagset/Title=Example Meta",
  id = ‘Tagset',
  items = {
    {'com.adobe.jobIdentifier', height_in_lines = 1},
    'com.adobe.separator',
    {'com.adobe.title', height_in_lines = 2},
    'com.adobe.separator',
    {'com.adobe.caption', height_in_lines = 6},
  },
}
</code></pre>

<p>The full list of options can be seen from page 63 of the <a href="http://wwwimages.adobe.com/www.adobe.com/content/dam/Adobe/en/devnet/photoshoplightroom/pdfs/lr5/lightroom-sdk-guide.pdf">lightroom sdk guide</a>.</p>

<p>My <a href="https://github.com/morganp/CopyrightMetadataTagset.lrdevplugin">Copyright view</a> and <a href="https://github.com/morganp/CopyrightMetadataTagset.lrdevplugin">JobID view</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iTerm Exit Fullscreen]]></title>
    <link href="http://lizard-spock.co.uk/blog/tech/iterm-exit-fullscreen/"/>
    <updated>2014-04-08T19:27:00+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/tech/iterm-exit-fullscreen</id>
    <content type="html"><![CDATA[<p><code>⌘-Enter</code> toggles fullscreen in <a href="http://www.iterm2.com/">iTerm</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Verilog Importing Envvar]]></title>
    <link href="http://lizard-spock.co.uk/blog/engineering/verilog-importing-envvar/"/>
    <updated>2014-04-03T18:22:00+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/engineering/verilog-importing-envvar</id>
    <content type="html"><![CDATA[<p>Based on a <a href="http://stackoverflow.com/a/15103561/97073">Stackoverflow answer</a>, to import environment variables into Verilog you can use:</p>

<pre><code>import "DPI-C" function string getenv(input string env_name);

module top;
  initial begin
    $write("env = %s\n", {getenv("HOME"), "/FileName"});
  end
endmodule
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixing Mangled Octopress Tags]]></title>
    <link href="http://lizard-spock.co.uk/blog/tech/fixing-mangled-octopress-tags/"/>
    <updated>2014-04-01T20:59:40+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/tech/fixing-mangled-octopress-tags</id>
    <content type="html"><![CDATA[<p>When creating my blog I have been inconsistent with the tag <code>command line</code>, <code>Command line</code> and
<code>Command Line</code> the case in-sensitvities are not picked up in Octopress generation. To some
extent my <a href="">Downcase plugin</a> hides these differences. The tags page only lists those with full
downcase, but handles all other mixed case tags.</p>

<p>This has lead to some posts dropping off the tag listing, which are just not accessible this way.</p>

<p>The easy fix is to standardise my use of the tag.</p>

<p>First investigate: List posts containing the downcased version:</p>

<pre><code>grep -R '\- command line' *
</code></pre>

<p>Correct all :</p>

<pre><code>find ./source/_posts -type f -print0 | xargs -I{} sed -i '' 's/\- [Cc]ommand [Ll]ine/\- Command Line/g' {}
</code></pre>

<p><code>find</code> outputs all files in folder ‘./‘ Actually had some trouble rerunning this find command so simplified it to :</p>

<pre><code>ls source/_posts/*.markdown | xargs -I{} sed -i '' 's/\- [Cc]ommand [Ll]ine/\- Command Line/g' {}
</code></pre>

<p><strong>xargs</strong> option <code>i{}</code> takes the input argument and repeats it in the following command where the
<code>{}</code> are placed. <code>find</code> has a built in <code>-exec</code> option but using xargs allows the first <code>find</code>
command to be replaced with <code>grep</code> or <code>ls</code> if required.</p>

<p><strong>Sed</strong> options</p>

<ol>
<li><code>g</code> Replace all the instances</li>
<li><code>-i ‘’</code> Edits inplace without appending a new file extension.</li>
</ol>


<p>On a Mavericks the default see does not support case insensitive search,
therefore I have enclosed the first letter of each word with options for lower and upper case.</p>

<p>After performing the updates the tag text is updated to <code>Command Line</code> and the url is
<a href="http://lizard-spock.co.uk/tag/command-line/"><code>tag/command-line/</code></a>, which lists all of the tagged posts.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thor Variable Arguments]]></title>
    <link href="http://lizard-spock.co.uk/blog/tech/thor-variable-arguments/"/>
    <updated>2014-04-01T19:39:19+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/tech/thor-variable-arguments</id>
    <content type="html"><![CDATA[<p><a href="http://whatisthor.com/">Thor</a> is a Ruby Gem, which allows you to build command line applications which accept commands, in the same way <code>git</code> accepts <code>add</code> as a command.</p>

<p>The Helloworld example :</p>

<pre><code>require "thor"

class MyCLI &lt; Thor
  desc "hello NAME", "say hello to NAME"
  def hello(name)
    puts "Hello #{name}"
  end
end
MyCLI.start(ARGV)
</code></pre>

<p>The help and single input.</p>

<pre><code>$ ruby thor_test.rb help hello
&gt; Usage:
&gt;  thor_test.rb hello NAME
&gt;
&gt; say hello to NAME


$ ruby thor_test.rb Hello a
&gt; Hello a
</code></pre>

<p>Now with multiple, inputs:</p>

<pre><code>$ ruby thor_test.rb Hello a b
&gt; thor_test.rb hello requires at least 1 argument: "thor_test.rb hello NAME”.
</code></pre>

<p>Not really what you want if you were building a command like <code>git add</code> when you
would want all following arguments as inputs.</p>

<p>To accept a variable number of arguments is not Thor specific but a standard
ruby idiom. A splat in front of your variable ie <code>*name</code>.</p>

<pre><code>require "thor"

class MyCLI &lt; Thor
  desc "hello NAME", "say hello to NAME"
  def hello(*name)
    puts "Hello #{name * “ "}"
  end
end
MyCLI.start(ARGV)

$ ruby thor_test.rb Hello a b
&gt; Hello a b
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Print Array]]></title>
    <link href="http://lizard-spock.co.uk/blog/tech/ruby-print-array/"/>
    <updated>2014-04-01T18:36:00+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/tech/ruby-print-array</id>
    <content type="html"><![CDATA[<p><code>puts</code> and <code>to_s</code> could be better:</p>

<pre><code>a = [1, 2, 3]
puts a
&gt; 1
&gt; 2
&gt; 3

puts a.to_s
&gt; [1, 2, 3]
</code></pre>

<h2>Nicely print an array</h2>

<p>Multiply it out with spaces:</p>

<pre><code>a = [1, 2, 3]
puts a * " "
&gt; 1 2 3
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Screen Scrollback]]></title>
    <link href="http://lizard-spock.co.uk/blog/tech/screen-scrollback/"/>
    <updated>2014-03-25T20:57:28+00:00</updated>
    <id>http://lizard-spock.co.uk/blog/tech/screen-scrollback</id>
    <content type="html"><![CDATA[<p>Enter copy mode</p>

<pre><code>ctrl-a [
</code></pre>

<p>Use cursors of vim motions to move to relevant area.</p>

<p>Space to start selection, space again to end selection and copy to screen copy-buffer</p>

<p>Move to virtual screen terminal where you want to paste then</p>

<pre><code>ctrl-a ]
</code></pre>

<p>To paste to file enter</p>

<pre><code>cat &gt; paste.file
#// Then press ctrl-a ]
</code></pre>

<p><a href="http://commandliners.com/2009/12/screen-working-with-the-scrollback-buffer/">More notes on screen scrollback history</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Matlab: Leading 0's]]></title>
    <link href="http://lizard-spock.co.uk/blog/engineering/matlab-leading-0-s/"/>
    <updated>2014-03-25T20:52:35+00:00</updated>
    <id>http://lizard-spock.co.uk/blog/engineering/matlab-leading-0-s</id>
    <content type="html"><![CDATA[<p>For adding leading zeros to a number the following can be used for 4 decimal places with integer input:</p>

<pre><code>dat = 1;
sprintf(['%4.4d'], dat)
</code></pre>

<p>To make this programmable the following can be used:</p>

<pre><code>dat       = 1;
min_width = 4;
sprintf(['%',num2str(min_width),'.', num2str(min_width),'d'], 1)
</code></pre>

<p>For string inputs you need:</p>

<pre><code>dat       = '1'
min_width = 4;
sprintf(['%0',num2str(6),'s'], dat)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mavericks Disable Mail Sound]]></title>
    <link href="http://lizard-spock.co.uk/blog/tech/mavericks-disable-mail-sound/"/>
    <updated>2014-03-18T17:41:49+00:00</updated>
    <id>http://lizard-spock.co.uk/blog/tech/mavericks-disable-mail-sound</id>
    <content type="html"><![CDATA[<p>Since upgrading to Mavericks I get a sound whenever I get mail. I find this very annoying so first port of call is to disable &lsquo;Play user interface sound effects&rsquo; from  System Preferences &ndash;> Sound.</p>

<p>This did not work, I found a separate option in mail for playing a sound on incoming mail, disabled that and other actions if you want.</p>

<p><img src="http://lizard-spock.co.uk/images/Tech/Disable_mail_sound.png" alt="" /></p>

<p><em>NB: On checking things to write this I found that &lsquo;Play user interface sound effects&rsquo; had been enabled again.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Matlab Wrapper Scripts]]></title>
    <link href="http://lizard-spock.co.uk/blog/engineering/matlab-wrapper-scripts/"/>
    <updated>2014-03-17T19:48:57+00:00</updated>
    <id>http://lizard-spock.co.uk/blog/engineering/matlab-wrapper-scripts</id>
    <content type="html"><![CDATA[<p>To wrap a function with variable input arguments and pass them all on to the wrapped function.
Based on a <a href="http://stackoverflow.com/questions/4895556/how-to-wrap-a-function-using-varargin-and-varargout">StackOverflow answer</a>:</p>

<pre><code>function varargout = wrapper( varargin )
[varargout{1:nargout}] = someFunction( varargin{:} ); 
</code></pre>

<p>Used in the <a href="https://github.com/Matlab-Toolbox/printf">printf toolbox</a>: where we wrap fprint to print directly to stdout.</p>

<pre><code>function printf( varargin )
  fprintf(1, varargin{:}); 
end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Matlab Sort_by]]></title>
    <link href="http://lizard-spock.co.uk/blog/engineering/matlab-sort-by/"/>
    <updated>2014-03-17T18:55:11+00:00</updated>
    <id>http://lizard-spock.co.uk/blog/engineering/matlab-sort-by</id>
    <content type="html"><![CDATA[<p>In ruby we can perform schwartzian transforms easily with the sort_by method. This allows sorting enumerators by any property.</p>

<p>For example to do a non case sensitive sort:</p>

<pre><code>some_array.sort_by { |x| x.downcase }
</code></pre>

<p><a href="http://blogs.mathworks.com/pick/2010/09/17/sorting-structure-arrays-based-on-fields/">Based on this Mathworks blog</a>, I have ported the <a href="http://www.mathworks.com/matlabcentral/fileexchange/28573-nested-sort-of-structure-arrays">Matlab central code</a> to a <a href="https://github.com/Matlab-Toolbox/nested_sort">Toolbox on Github</a>.</p>

<p>After Downloading the toolbox and adding the functions folder to your path.</p>

<pre><code>addpath('../lib/nested_sort/function/');
</code></pre>

<p>Basic usage is:</p>

<pre><code>A = struct('name', num2cell(1:4), 'value', {5,2,3,1});
B=sortStruct(A,'value');
</code></pre>

<p>B is A sorted by &lsquo;value&rsquo;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raised Bed, Update]]></title>
    <link href="http://lizard-spock.co.uk/blog/garden/raised-bed-update/"/>
    <updated>2014-03-16T21:36:59+00:00</updated>
    <id>http://lizard-spock.co.uk/blog/garden/raised-bed-update</id>
    <content type="html"><![CDATA[<p>Update to the raised beds. Delivery of top soil:
<img src="http://lizard-spock.co.uk/images/Gardening/RaisedBed2/morganp-20140226-Garden-_MG_6875.jpg" alt="" /></p>

<p>Raised bed lined with weed barrier and then 20mm Gravel. Filled with Top soil, Compost and Vermiculite mix.
My version of <a href="http://www.mysquarefootgarden.net/mels-mix/">Mels Mix</a>.</p>

<p><img src="http://lizard-spock.co.uk/images/Gardening/RaisedBed2/morganp-20140226-Garden-_MG_6877.jpg" alt="" /></p>

<p>The first bed prepared. With make shift cat deterrent.
<img src="http://lizard-spock.co.uk/images/Gardening/RaisedBed2/morganp-20140226-Garden-_MG_6881.jpg" alt="" /></p>

<p>The two raised bed in place for this (2014) year. The second raised bed has a deeper section for Carrots.
<img src="http://lizard-spock.co.uk/images/Gardening/RaisedBed2/morganp-20140316-Garden-_MG_7028.jpg" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tool Acquisition]]></title>
    <link href="http://lizard-spock.co.uk/blog/garden/tool-acquisition/"/>
    <updated>2014-03-16T19:37:57+00:00</updated>
    <id>http://lizard-spock.co.uk/blog/garden/tool-acquisition</id>
    <content type="html"><![CDATA[<p><img src="http://lizard-spock.co.uk/images/Gardening/morganp-20140316-Garden-_MG_7012.jpg" alt="" /></p>

<p>Just after Christmas I got a Joseph Bently digging spade (larger than the border spade). Bought from <a href="http://www.dunbargardencentre.co.uk/">Dunbar Garden Center</a> for £22 as I had a £5 Off voucher for spending over £50 during December. Actually had 2 vouchers one was used for the <a href="http://lizard-spock.co.uk/blog/garden/birdbox/">bird boxes</a>.</p>

<p><img src="http://lizard-spock.co.uk/images/Gardening/morganp-20140209-Spade-IMG_6737.jpg" alt="" /></p>

<p>Used for preparing ground for the raised beds.</p>

<p>The latest acquisition was a Joseph Bently Edging knife.</p>

<p><img src="http://lizard-spock.co.uk/images/Gardening/morganp-20140316-Garden-_MG_7008.jpg" alt="" />
Really should have got this before digging up the turf to put the raised beds in.
This should result in much cleaner edges when removing turf.</p>

<p><img src="http://lizard-spock.co.uk/images/Gardening/morganp-20140316-Garden-_MG_7016.jpg" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Propagator Trays]]></title>
    <link href="http://lizard-spock.co.uk/blog/garden/propagator-trays/"/>
    <updated>2014-03-16T19:23:48+00:00</updated>
    <id>http://lizard-spock.co.uk/blog/garden/propagator-trays</id>
    <content type="html"><![CDATA[<p>Sunday trip to <a href="http://www.merryhatton.co.uk/">Marryhatton</a>. Getting serious about propagation now, got these seed trays to move the seedlings to after they have germinated in the heated propagator.</p>

<p><img src="http://lizard-spock.co.uk/images/Gardening/morganp-20140316-Garden-_MG_6991.jpg" alt="" /></p>

<p>Saw (&amp; bought) this reed 5m by 2m screen on sale for £12.99!</p>

<p><img src="http://lizard-spock.co.uk/images/Gardening/morganp-20140316-Garden-_MG_7002.jpg" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[F-Stop Loka Hydration]]></title>
    <link href="http://lizard-spock.co.uk/blog/photography/f-stop-loka-hydration/"/>
    <updated>2014-03-16T18:13:55+00:00</updated>
    <id>http://lizard-spock.co.uk/blog/photography/f-stop-loka-hydration</id>
    <content type="html"><![CDATA[<p>Not a review, just noting the default position of the velcro hydration loop, before I remove it.
Left shoulder, under chest harness.</p>

<p><img src="http://lizard-spock.co.uk/images/Photography/Loka/morganp-20140315-Loka-IMG_6970.jpg" alt="" />
<img src="http://lizard-spock.co.uk/images/Photography/Loka/morganp-20140315-Loka-IMG_6976.jpg" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Iterate Over Lines in a String]]></title>
    <link href="http://lizard-spock.co.uk/blog/tech/ruby-iterate-over-lines-in-a-string/"/>
    <updated>2014-03-13T21:03:54+00:00</updated>
    <id>http://lizard-spock.co.uk/blog/tech/ruby-iterate-over-lines-in-a-string</id>
    <content type="html"><![CDATA[<pre><code>str.each_line do |line|
  #do something with line
end
</code></pre>

<p><a href="http://stackoverflow.com/a/601892/97073">Source</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Macbook Keyboard Light Not Working]]></title>
    <link href="http://lizard-spock.co.uk/blog/tech/macbook-keyboard-light-not-working/"/>
    <updated>2014-03-13T20:00:47+00:00</updated>
    <id>http://lizard-spock.co.uk/blog/tech/macbook-keyboard-light-not-working</id>
    <content type="html"><![CDATA[<p>Checkout : <a href="http://support.apple.com/kb/HT4882">Apple support</a>.</p>

<p>Disable &lsquo;Adjust keyboard brightness in low light&rsquo;.<br/>
<img src="http://lizard-spock.co.uk/images/Tech/Keyboard_low_light.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Tag and Push to Github]]></title>
    <link href="http://lizard-spock.co.uk/blog/tech/git-tag-and-push-to-github/"/>
    <updated>2014-03-13T19:16:57+00:00</updated>
    <id>http://lizard-spock.co.uk/blog/tech/git-tag-and-push-to-github</id>
    <content type="html"><![CDATA[<pre><code>git tag -a 0.0.1 -m "Tag comment"
git push --tags
</code></pre>

<p><em>Note: The use of <a href="http://semver.org/">major.minor.patch Semantic Versioning</a> is a really good idea.</em></p>
]]></content>
  </entry>
  
</feed>
