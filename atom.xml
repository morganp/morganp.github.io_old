<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[RockPaperScissors]]></title>
  <link href="http://lizard-spock.co.uk/atom.xml" rel="self"/>
  <link href="http://lizard-spock.co.uk/"/>
  <updated>2014-05-28T19:43:32+01:00</updated>
  <id>http://lizard-spock.co.uk/</id>
  <author>
    <name><![CDATA[Morgan Prior]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Matlab: Line Breaks in Strings]]></title>
    <link href="http://lizard-spock.co.uk/blog/engineering/matlab-linebreaks-in-strings/"/>
    <updated>2014-05-28T19:34:30+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/engineering/matlab-linebreaks-in-strings</id>
    <content type="html"><![CDATA[<p>Wrap strings with <code>sprintf</code> to allow the <code>\n</code> to be escaped correctly.</p>

<pre><code>&gt;&gt; disp('hello\nworld')
hello\nworld

&gt;&gt; disp(sprintf('hello\nworld'))
hello
world
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Matlab: Listing Field Name Values of a Struct]]></title>
    <link href="http://lizard-spock.co.uk/blog/engineering/matlab-listing-field-name-values-of-a-struct/"/>
    <updated>2014-05-28T19:05:01+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/engineering/matlab-listing-field-name-values-of-a-struct</id>
    <content type="html"><![CDATA[<pre><code>s = struct ;
s(1).dat =‘a' ;
s(1).freq=11 ;
s(2).dat =‘b' ;
s(2).freq=22 ;
</code></pre>

<p>Where:</p>

<pre><code>s(1)

ans =

     dat: 'a'
    freq: 11
</code></pre>

<p>How do you access [‘a’, ‘b’] and [11, 22]?</p>

<pre><code>[s.dat] , [s.freq]
</code></pre>

<p>The <code>[]</code> are really important here.</p>

<pre><code>[s.freq]

ans =

    11    22
</code></pre>

<p><a href="http://blogs.mathworks.com/loren/2007/04/19/vectorizing-access-to-an-array-of-structures/">Solution found on a Loren Post</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fstop ICU Strobies]]></title>
    <link href="http://lizard-spock.co.uk/blog/photography/fstop-icu-strobies/"/>
    <updated>2014-05-28T18:44:55+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/photography/fstop-icu-strobies</id>
    <content type="html"><![CDATA[<p>My large ICU loaded with my <a href="http://www.wexphotographic.com/buy-interfit-strobies-portrait-kit/p1031888">Strobies portrait kit</a> and Canon 580EX MKII.</p>

<p><img src="http://lizard-spock.co.uk/images/Photography/fstop_icu_large_lighting/morganp-20140517-FStop-_MG_8927.jpg" alt="" /></p>

<p>The collapsed soft box is folded into the right hand side. Additional accessories are a <a href="https://www.amazon.co.uk/dp/B0007DDK7A?tag=morgue-21&amp;camp=2902&amp;creative=19466&amp;linkCode=as4&amp;creativeASIN=B0007DDK7A&amp;adid=1VSQ11QZRMHHASH7FHN9&amp;">3M Lastolite off camera cord</a>, <a href="https://www.amazon.co.uk/dp/B002D4AHT0?tag=morgue-21&amp;camp=2902&amp;creative=19466&amp;linkCode=as4&amp;creativeASIN=B002D4AHT0&amp;adid=0PB41F04SGBY01WKVJYB&amp;">Colorvision SpyderCube</a> and a <a href="https://www.amazon.co.uk/dp/B0007DDK7A?tag=morgue-21&amp;camp=2902&amp;creative=19466&amp;linkCode=as4&amp;creativeASIN=B0007DDK7A&amp;adid=1VSQ11QZRMHHASH7FHN9&amp;">Stofen</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kettlebell Rack]]></title>
    <link href="http://lizard-spock.co.uk/blog/home/kettlebell-rack/"/>
    <updated>2014-05-28T18:32:43+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/home/kettlebell-rack</id>
    <content type="html"><![CDATA[<p><img src="http://lizard-spock.co.uk/images/Home/KettlebellRack/morganp-20140518-diy-_MG_8954.jpg" alt="" />
Kettlebell rack with 24kg, 16kg, 8kg, 12kg, 16kg, 20kg.</p>

<p><img src="http://lizard-spock.co.uk/images/Home/KettlebellRack/morganp-20140518-diy-_MG_8960.jpg" alt="" />
End detail showing bracing.</p>

<p><img src="http://lizard-spock.co.uk/images/Home/KettlebellRack/morganp-20140518-diy-_MG_8968.jpg" alt="" />
Underside of rack.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Matlab Toolboxes with Absolute Path Setup]]></title>
    <link href="http://lizard-spock.co.uk/blog/engineering/matlab-toolboxes-with-absolute-path-setup/"/>
    <updated>2014-05-07T18:22:48+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/engineering/matlab-toolboxes-with-absolute-path-setup</id>
    <content type="html"><![CDATA[<p>When a script or function is called with <code>run(./relative/path/script)</code> the working directory is changed to the <code>./relative/path</code>. This means <code>pwd</code> it can be used to specify absolute paths:</p>

<pre><code>run(./libs/example_toolbox/load_toolbox)
</code></pre>

<p>Which contains :</p>

<pre><code>addpath([pwd, '/function']);
</code></pre>

<p>Now  The path will contain <code>C:/ ... /libs/example_toolbox/function</code></p>

<p>As shown in the example this is useful for toolboxes etc which could be distributed with a top level script which adds the toolbox functions on to the path.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Matlab: Array Content Check]]></title>
    <link href="http://lizard-spock.co.uk/blog/engineering/matlab-array-content-check/"/>
    <updated>2014-05-07T18:13:24+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/engineering/matlab-array-content-check</id>
    <content type="html"><![CDATA[<p>Checking if an Array contains a number:</p>

<pre><code>input = [1,2,3,4];
check = 4;
any(input==4)
</code></pre>

<p>Check if a number is contained in an array:</p>

<pre><code>input = 32;
check = [32,64,128];
any( check==input )
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Matlab: Split Odd &amp; Even Array Elements]]></title>
    <link href="http://lizard-spock.co.uk/blog/engineering/matlab-split-odd-and-even-array-elements/"/>
    <updated>2014-05-07T17:58:33+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/engineering/matlab-split-odd-and-even-array-elements</id>
    <content type="html"><![CDATA[<p>Using Matlab to splitting data into odd and even samples.</p>

<p>A for loop approach:</p>

<pre><code>data_odd  = [];
data_even = [];
for i = 1:length(data)
  if mod(i,2)
    %% disp('odd')
    data_odd = [data_odd, data(i)]
  else
    %% disp('even')
    data_even = [data_even, data(i)]
  end
end
</code></pre>

<p>Matlab approach using ranges to remap values:</p>

<pre><code>data_odd =data(1:2:end);
data_even=data(2:2:end);
</code></pre>

<p>Ranges are composed of <code>start_index:step_size:end_index</code>. If step_size is omitted, 1 is assumed.</p>

<p><code>end</code> has a special meaning when used inside an array, it is the position of the last element.
To append to an array you could use <code>data(end+1) = append_value</code></p>

<p>No error or warning is triggered if the <code>end_index</code> can not be reached with the given step size, which is why this works with <code>end</code> as the stop point of both sides.</p>

<h2>Example</h2>

<pre><code>a   = [1, 2, 3, 4, 5];
odd = a(1:2:end)
even= a(2:2:end)

odd =
     1     3     5

even =
     2     4
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lee Standard Hood]]></title>
    <link href="http://lizard-spock.co.uk/blog/photography/lee-standard-hood/"/>
    <updated>2014-05-05T20:36:43+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/photography/lee-standard-hood</id>
    <content type="html"><![CDATA[<p>Available to buy from <a href="http://www.wexphotographic.com/buy-lee-standard-lens-hood/p1010398">WEX</a>. Also see <a href="http://lizard-spock.co.uk/blog/photography/lee-wide-angle-hood/">Lee Wide Angle Hood</a>.</p>

<p>Hoods or lens shades help improve contrast by stopping out of frame light source entering the lens. LEE filters are square filters that can be used for effects or managing dynamic range, however as they mount in front of the lens with a holder you can no longer use your lenses standard hood. LEE have a standard, universal and wide angle hoods available.</p>

<p>LEE do not provide many specs for the hood on their website. To help others decide
if this is right for them I have included measurements and pictures.</p>

<p>The Standard is the smallest of the three hoods.
It actually has a very clever rail system which allows it to be mounted in a slot.
When mounted on to a lee adapter ring this sits further back out of the way.
All Lee products should have this and there would be no need for a tandem connector.</p>

<p><img src="http://lizard-spock.co.uk/images/Photography/LEE/morganp-20140405-Lee-_MG_7257.jpg" alt="" /></p>

<p>Filter weigh 150g</p>

<h2>Dimensions</h2>

<pre><code>Width Height:
External: 13.1cm x 13.1cm
Internal: 11.1cm x 11.1cm

Depth:
Complete compressed: 3.5cm.
</code></pre>

<p>Min expansion</p>

<pre><code>complete    : 4.6cm
hood &amp; mount: 3.6cm
hood only   : 3.1cm
</code></pre>

<p><img src="http://lizard-spock.co.uk/images/Photography/LEE/morganp-20140405-Lee-_MG_7249.jpg" alt="" /></p>

<p>Max Expansion</p>

<pre><code>complete    : 15.0cm
hood &amp; mount: 14.0cm
hood only   : 13.3cm 
</code></pre>

<p><img src="http://lizard-spock.co.uk/images/Photography/LEE/morganp-20140405-Lee-_MG_7251.jpg" alt="" /></p>

<p><strong>This hood is too small for use under 28mm on a full-frame camera.</strong></p>

<p>On a crop sensor it is still good at 16mm</p>

<p>Vignetting examples:
<img src="http://lizard-spock.co.uk/images/Photography/LEE/morganp-20140405-Lee-IMG_0116.jpg" alt="" />
Setup for following examples, Canon 6D, wide angle adapter, Lee holder 3 slots (2 for filters, 1 for hood) then universal hood at minimal expansion.</p>

<p><img src="http://lizard-spock.co.uk/images/Photography/LEE/morganp-20140409--_MG_7416.jpg" title="16mm full-frame" alt="" />
above 16mm full-frame with filter holder</p>

<p><img src="http://lizard-spock.co.uk/images/Photography/LEE/morganp-20140409--_MG_7417.jpg" title="20mm full-frame" alt="" />
above 20mm full-frame with filter holder</p>

<p><img src="http://lizard-spock.co.uk/images/Photography/LEE/morganp-20140409--_MG_7418.jpg" title="24mm full-frame" alt="" />
above 24mm full-frame with filter holder</p>

<p><img src="http://lizard-spock.co.uk/images/Photography/LEE/morganp-20140409--_MG_7419.jpg" title="28mm full-frame" alt="" />
above 28mm full-frame with filter holder</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Licence Types and Short Identifiers]]></title>
    <link href="http://lizard-spock.co.uk/blog/tech/licence-types-and-short-identifiers/"/>
    <updated>2014-05-05T20:17:43+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/tech/licence-types-and-short-identifiers</id>
    <content type="html"><![CDATA[<p>Some time ago <a href="http://guides.rubygems.org/specification-reference/">gemspec</a> files for ruby gems added the ability to
specify the short identifier for the license type.</p>

<pre><code>Gem::Specification.new do |s|
  s.licenses    = ['MIT']
end
</code></pre>

<p>The unofficial list of short identifiers is available from <a href="https://spdx.org/licenses/">spdx</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lightroom Load Canon 6D GPS]]></title>
    <link href="http://lizard-spock.co.uk/blog/photography/lightroom-load-canon-6d-gps/"/>
    <updated>2014-04-14T19:01:06+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/photography/lightroom-load-canon-6d-gps</id>
    <content type="html"><![CDATA[<p>Adobe Lightroom will only load GPX, Canon 6D only saves NMEA data.</p>

<p><a href="http://www.gpsbabel.org/">GPSBabel</a> can be used to convert the <code>*.log</code> from the camera to <code>*.gpx</code>.</p>

<p>Download the software then load the log file for the input setting the type to <code>NMEA 0183 sentences</code>.</p>

<p>Set the output file name and set the format to <code>GPX XML</code>. Click OK to generate the GPX which can now be loaded into Lightroom.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Craghoppers Pro Stretch]]></title>
    <link href="http://lizard-spock.co.uk/blog/outdoor/craghoppers-up-to-tricks/"/>
    <updated>2014-04-10T18:12:22+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/outdoor/craghoppers-up-to-tricks</id>
    <content type="html"><![CDATA[<p>Last year I got a pair of the pro stretch trousers for walking, they were pretty good for walking in so good I just went back to get another pair.</p>

<p>There are however some changes to the current versions.</p>

<p>The back of the waist band use to fully elasticated. Now only two small side
sections on the waistband are elasticated this massively reduced the range of
fit the trousers have. So much so they have introduced a larger size to
accommodate the change in fit. This does however bring the styling and
available sizes in-line with the Craghoppers staple Classic Kiwi.</p>

<p>To note my new versions are a size larger, and they still have a small fit than the old ones.</p>

<p>The feel of the new trousers is not as nice as the old ones. They have altered the fabric mix:</p>

<p><code>OLD: 93% Polyamide 7% Elastane</code><br/>
<code>NEW: 96% Polyamide 4% Elastane</code></p>

<p>I guess the old ones were just to comfortable and stretchy :(</p>

<p>The old style waist band:<br/>
<img src="http://lizard-spock.co.uk/images/Outdoor/morganp-20140410-CraghopperProStretch-_MG_7421.jpg" title="Old style wasit band" alt="" /></p>

<p>New style Waistband, minimal stretchiness :<br/>
<img src="http://lizard-spock.co.uk/images/Outdoor/morganp-20140410-CraghopperProStretch-_MG_7425.jpg" alt="" />
<img src="http://lizard-spock.co.uk/images/Outdoor/morganp-20140410-CraghopperProStretch-_MG_7426.jpg" alt="" /></p>

<p>Old style thigh pocket, completely external:
<img src="http://lizard-spock.co.uk/images/Outdoor/morganp-20140410-CraghopperProStretch-_MG_7423.jpg" title="Old style thigh pocket, completely external" alt="" /></p>

<p>Inside view of pocket, not much to rub or cause irritation which is good for a close fitting trouser.
<img src="http://lizard-spock.co.uk/images/Outdoor/morganp-20140410-CraghopperProStretch-_MG_7428.jpg" alt="" /></p>

<p>New style, thigh pocket zipper looks very sleek.
<img src="http://lizard-spock.co.uk/images/Outdoor/morganp-20140410-CraghopperProStretch-_MG_7427.jpg" alt="" /></p>

<p>New style, internal thigh pocket cleverly designed for maximum irritation while walking.
<img src="http://lizard-spock.co.uk/images/Outdoor/morganp-20140410-CraghopperProStretch-_MG_7429.jpg" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Methods and Splat]]></title>
    <link href="http://lizard-spock.co.uk/blog/tech/ruby-methods-and-splat/"/>
    <updated>2014-04-09T19:47:47+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/tech/ruby-methods-and-splat</id>
    <content type="html"><![CDATA[<p>Ruby methods can set default values for optional arguments:</p>

<pre><code>def commit(path=Dir.pwd)
</code></pre>

<p>To take an optional number of arguments a splat can be used:</p>

<pre><code>def amethod( *arg1 )
</code></pre>

<p>The Problem is now to set defaults or require a set number of arguments.</p>

<ol>
<li>Splat arguments can not be defaulted.</li>
<li>The splat can accept zero arguments.</li>
</ol>


<p>The following might be what you would expect for a default in a splat, but this conflicts with its abilliy to accept 0 arguments.</p>

<pre><code>def commit(*path=[Dir.pwd]) ##THIS DOES NOT WORK
</code></pre>

<p>Splats can follow other arguments. To require at least one argument:</p>

<pre><code>def add(files, *files_splat)
</code></pre>

<p>No arguments required but the first has a default:</p>

<pre><code>def commit(path=Dir.pwd, *path_splat)
</code></pre>

<p>These also work as expected in Thor for parsing command line options. I have used them in my <a href="https://github.com/morganp/dssx">dssx</a> gem.</p>

<p>In thor I also add this to the start of my methods to combine <code>path</code> and <code>path_splat</code> which are strings:</p>

<pre><code>path_list = path + ' ' + path_splat * ' '
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thor Adding --verbose]]></title>
    <link href="http://lizard-spock.co.uk/blog/tech/thor-adding-verbose/"/>
    <updated>2014-04-09T19:26:44+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/tech/thor-adding-verbose</id>
    <content type="html"><![CDATA[<p>With a command line Ruby application using Thor for the option parsing I want to be able to run:</p>

<pre><code>$ thor_app --version
&gt; thor_app version 1.0.0
</code></pre>

<p>Create a boolean class option, which does not belong to a task, that can be referenced by other tasks. The often used example for a class option is -v verbose, as all tasks can use this to determine how noisy they should be.</p>

<p>Then create a &lsquo;version&rsquo; task and make it the default task, so when no task is defined the version task is ran and can react to the &mdash;version flag (class option).</p>

<pre><code>class CLI &lt; Thor
  #include Thor::Actions
  class_option :version, :type =&gt; :boolean

  desc "version", "Show thor_app version"
  def version
    if options[:version]
      puts "thor_app version #{find_version}"
    end
  end
  default_task :version

  no_tasks do
    def find_version
      ## Method can be replaced to look up VERSION
      '1.0.0'
    end
  end
end
</code></pre>

<p>This is based on <a href="http://stackoverflow.com/q/22809972/97073">my SO Question</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating Lightroom Metadata Views]]></title>
    <link href="http://lizard-spock.co.uk/blog/tech/photography/creating-lightroom-metadata-views/"/>
    <updated>2014-04-09T01:28:27+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/tech/photography/creating-lightroom-metadata-views</id>
    <content type="html"><![CDATA[<p>Lightroom plugins for metadata views are called metadata tag sets and only require 2 text files.</p>

<p>create a folder called <code>something.lrdevplugin</code> once you are happy with it it can be renamed <code>something.lrplugin</code></p>

<p>Create a file called Info.lua and Tagset.lua</p>

<p>Info.lua:</p>

<pre><code>return {
  LrSdkVersion = 5.0,
  LrSdkMinimumVersion = 5.0,
  LrToolkitIdentifier = ’sample.metadata',
  LrPluginName = LOC "$$$/CustomMetadata/PluginName=Example View",
  LrMetadataTagsetFactory = ‘Tagset.lua',
}
</code></pre>

<p>Tagset.lua</p>

<pre><code>return {
  title = LOC "$$$/SampleTagset/Title=Example Meta",
  id = ‘Tagset',
  items = {
    {'com.adobe.jobIdentifier', height_in_lines = 1},
    'com.adobe.separator',
    {'com.adobe.title', height_in_lines = 2},
    'com.adobe.separator',
    {'com.adobe.caption', height_in_lines = 6},
  },
}
</code></pre>

<p>The full list of options can be seen from page 63 of the <a href="http://wwwimages.adobe.com/www.adobe.com/content/dam/Adobe/en/devnet/photoshoplightroom/pdfs/lr5/lightroom-sdk-guide.pdf">lightroom sdk guide</a>.</p>

<p>My <a href="https://github.com/morganp/CopyrightMetadataTagset.lrdevplugin">Copyright view</a> and <a href="https://github.com/morganp/CopyrightMetadataTagset.lrdevplugin">JobID view</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iTerm Exit Fullscreen]]></title>
    <link href="http://lizard-spock.co.uk/blog/tech/iterm-exit-fullscreen/"/>
    <updated>2014-04-08T19:27:00+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/tech/iterm-exit-fullscreen</id>
    <content type="html"><![CDATA[<p><code>⌘-Enter</code> toggles fullscreen in <a href="http://www.iterm2.com/">iTerm</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Verilog Importing Envvar]]></title>
    <link href="http://lizard-spock.co.uk/blog/engineering/verilog-importing-envvar/"/>
    <updated>2014-04-03T18:22:00+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/engineering/verilog-importing-envvar</id>
    <content type="html"><![CDATA[<p>Based on a <a href="http://stackoverflow.com/a/15103561/97073">Stackoverflow answer</a>, to import environment variables into Verilog you can use:</p>

<pre><code>import "DPI-C" function string getenv(input string env_name);

module top;
  initial begin
    $write("env = %s\n", {getenv("HOME"), "/FileName"});
  end
endmodule
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixing Mangled Octopress Tags]]></title>
    <link href="http://lizard-spock.co.uk/blog/tech/fixing-mangled-octopress-tags/"/>
    <updated>2014-04-01T20:59:40+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/tech/fixing-mangled-octopress-tags</id>
    <content type="html"><![CDATA[<p>When creating my blog I have been inconsistent with the tag <code>command line</code>, <code>Command line</code> and
<code>Command Line</code> the case in-sensitvities are not picked up in Octopress generation. To some
extent my <a href="">Downcase plugin</a> hides these differences. The tags page only lists those with full
downcase, but handles all other mixed case tags.</p>

<p>This has lead to some posts dropping off the tag listing, which are just not accessible this way.</p>

<p>The easy fix is to standardise my use of the tag.</p>

<p>First investigate: List posts containing the downcased version:</p>

<pre><code>grep -R '\- command line' *
</code></pre>

<p>Correct all :</p>

<pre><code>find ./source/_posts -type f -print0 | xargs -I{} sed -i '' 's/\- [Cc]ommand [Ll]ine/\- Command Line/g' {}
</code></pre>

<p><code>find</code> outputs all files in folder ‘./‘ Actually had some trouble rerunning this find command so simplified it to :</p>

<pre><code>ls source/_posts/*.markdown | xargs -I{} sed -i '' 's/\- [Cc]ommand [Ll]ine/\- Command Line/g' {}
</code></pre>

<p><strong>xargs</strong> option <code>i{}</code> takes the input argument and repeats it in the following command where the
<code>{}</code> are placed. <code>find</code> has a built in <code>-exec</code> option but using xargs allows the first <code>find</code>
command to be replaced with <code>grep</code> or <code>ls</code> if required.</p>

<p><strong>Sed</strong> options</p>

<ol>
<li><code>g</code> Replace all the instances</li>
<li><code>-i ‘’</code> Edits inplace without appending a new file extension.</li>
</ol>


<p>On a Mavericks the default see does not support case insensitive search,
therefore I have enclosed the first letter of each word with options for lower and upper case.</p>

<p>After performing the updates the tag text is updated to <code>Command Line</code> and the url is
<a href="http://lizard-spock.co.uk/tag/command-line/"><code>tag/command-line/</code></a>, which lists all of the tagged posts.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thor Variable Arguments]]></title>
    <link href="http://lizard-spock.co.uk/blog/tech/thor-variable-arguments/"/>
    <updated>2014-04-01T19:39:19+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/tech/thor-variable-arguments</id>
    <content type="html"><![CDATA[<p><a href="http://whatisthor.com/">Thor</a> is a Ruby Gem, which allows you to build command line applications which accept commands, in the same way <code>git</code> accepts <code>add</code> as a command.</p>

<p>The Helloworld example :</p>

<pre><code>require "thor"

class MyCLI &lt; Thor
  desc "hello NAME", "say hello to NAME"
  def hello(name)
    puts "Hello #{name}"
  end
end
MyCLI.start(ARGV)
</code></pre>

<p>The help and single input.</p>

<pre><code>$ ruby thor_test.rb help hello
&gt; Usage:
&gt;  thor_test.rb hello NAME
&gt;
&gt; say hello to NAME


$ ruby thor_test.rb Hello a
&gt; Hello a
</code></pre>

<p>Now with multiple, inputs:</p>

<pre><code>$ ruby thor_test.rb Hello a b
&gt; thor_test.rb hello requires at least 1 argument: "thor_test.rb hello NAME”.
</code></pre>

<p>Not really what you want if you were building a command like <code>git add</code> when you
would want all following arguments as inputs.</p>

<p>To accept a variable number of arguments is not Thor specific but a standard
ruby idiom. A splat in front of your variable ie <code>*name</code>.</p>

<pre><code>require "thor"

class MyCLI &lt; Thor
  desc "hello NAME", "say hello to NAME"
  def hello(*name)
    puts "Hello #{name * “ "}"
  end
end
MyCLI.start(ARGV)

$ ruby thor_test.rb Hello a b
&gt; Hello a b
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Print Array]]></title>
    <link href="http://lizard-spock.co.uk/blog/tech/ruby-print-array/"/>
    <updated>2014-04-01T18:36:00+01:00</updated>
    <id>http://lizard-spock.co.uk/blog/tech/ruby-print-array</id>
    <content type="html"><![CDATA[<p><code>puts</code> and <code>to_s</code> could be better:</p>

<pre><code>a = [1, 2, 3]
puts a
&gt; 1
&gt; 2
&gt; 3

puts a.to_s
&gt; [1, 2, 3]
</code></pre>

<h2>Nicely print an array</h2>

<p>Multiply it out with spaces:</p>

<pre><code>a = [1, 2, 3]
puts a * " "
&gt; 1 2 3
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Screen Scrollback]]></title>
    <link href="http://lizard-spock.co.uk/blog/tech/screen-scrollback/"/>
    <updated>2014-03-25T20:57:28+00:00</updated>
    <id>http://lizard-spock.co.uk/blog/tech/screen-scrollback</id>
    <content type="html"><![CDATA[<p>Enter copy mode</p>

<pre><code>ctrl-a [
</code></pre>

<p>Use cursors of vim motions to move to relevant area.</p>

<p>Space to start selection, space again to end selection and copy to screen copy-buffer</p>

<p>Move to virtual screen terminal where you want to paste then</p>

<pre><code>ctrl-a ]
</code></pre>

<p>To paste to file enter</p>

<pre><code>cat &gt; paste.file
#// Then press ctrl-a ]
</code></pre>

<p><a href="http://commandliners.com/2009/12/screen-working-with-the-scrollback-buffer/">More notes on screen scrollback history</a></p>
]]></content>
  </entry>
  
</feed>
